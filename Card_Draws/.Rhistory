TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
View(TfIdf)
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
load("C:/Users/Alex/Desktop/Business Analytics & Data Science/MATH513/Part 2/Package/BidenSpeeches/data/combined_speech_data.rda")
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
TfIdf(data)
TfIdf(data)
TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
install.packages("RDieHarder")
install.packages("RDieHarder")
library(RDieHarder)
library(RDieHarder)
library(RDieHarder)
dh <- dieharder; summary(dh); plot(dh)
dh <- dieharder %>% summary(dh)%>% plot(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
dh <- dieharder %>% summary(dh)%>% plot(dh)
dh <- dieharder
print(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
library(dgof)
library(randtoolbox)
#6a) Card Draw Data Analysis
#Retrieving the C# card draw data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CCard1Values <- fromJSON(file = "C#CardSim1.json")
CCard2Values <- fromJSON(file = "C#CardSim2.json")
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PCard1Values <- fromJSON(file = "PythonCardSim1.json")
PCard2Values <- fromJSON(file = "PythonCardSim2.json")
PCard3Values <- fromJSON(file = "PythonCardSim3.json")
setwd("D:/Github/PROJ518/Card_Draws")
RealCard1Values <- fromJSON(file = "CardDraw1(Alex).json")
RealCard2Values <- fromJSON(file = "CardDraw2(Ollie).json")
RealCard3Values <- fromJSON(file = "CardDraw3(James).json")
#In string form, the values given aren't suitable for visualisation
#First the data can be sorted into the four suits (spades (1), hearts (2), clubs (3), diamonds (4))
grepl("of Spades", RealCard1Values)
#In string form, the values given aren't suitable for visualisation
#First the data can be sorted into the four suits (spades (1), hearts (2), clubs (3), diamonds (4))
CardSuitGroup <- c()
for (x in CCard1Values) {
if (grepl("of Spades", CCard1Values[x]) = TRUE) {
if (grepl("of Spades", CCard1Values[x])) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", CCard1Values[x]) = TRUE){
#In string form, the values given aren't suitable for visualisation
#First the data can be sorted into the four suits (spades (1), hearts (2), clubs (3), diamonds (4))
CardSuitGroup <- c()
for (x in CCard1Values) {
if (grepl("of Spades", CCard1Values[x])) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", CCard1Values[x])){
CardSuitGroup <- append(CardSuitGroup, 2)
}else if (grepl("of Clubs", CCard1Values[x])){
CardSuitGroup <- append(CardSuitGroup, 3)
}else if (grepl("of Diamonds", CCard1Values[x])){
CardSuitGroup <- append(CardSuitGroup, 4)
}
}
#In string form, the values given aren't suitable for visualisation
#First the data can be sorted into the four suits (spades (1), hearts (2), clubs (3), diamonds (4))
CardSuitGroup <- c()
for (x in CCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, 2)
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, 3)
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, 4)
}
}
for (x in CCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, 2)
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, 3)
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, 4)
}
}
for (x in PCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, 2)
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, 3)
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, 4)
}
}
for (x in PCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, 2)
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, 3)
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, 4)
}
}
for (x in PCard3Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, 2)
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, 3)
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, 4)
}
}
for (x in RealCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, 2)
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, 3)
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, 4)
}
}
for (x in RealCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, 2)
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, 3)
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, 4)
}
}
for (x in RealCard3Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, 1)
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, 2)
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, 3)
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, 4)
}
}
CardShuffleGroup <- c()
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'C# Random')
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'C# Seeded Random')
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Python Randint')
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Numpy Random')
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Numpy Seeded Random')
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 1')
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 2')
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 3')
}
CardSuit_DF <- data.frame(CardSuitGroup, CardShuffleGroup)
print(CardSuit_DF)
CardShuffleGroup <- c()
CardPosition <- c()
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'C# Random')
CardPosition <- append(CardPosition, x)
}
CardShuffleGroup <- c()
CardPosition <- c()
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'C# Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'C# Seeded Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Python Randint')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Numpy Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Numpy Seeded Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 1')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 2')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 3')
CardPosition <- append(CardPosition, x)
}
CardSuit_DF <- data.frame(CardPositon, CardSuitGroup, CardShuffleGroup)
CardSuit_DF <- data.frame(CardPosition, CardSuitGroup, CardShuffleGroup)
print(CardSuit_DF)
ggplot(CardSuit_DF, aes(x = CardSuitGroup, y = CardPosition, colour = CardShuffleGroup)) +
geom_point(size = 3) + labs(x = "Possible Dice Outcomes (1-6)", y = "Frequency",
color = "Data Sources", title = "A Scatterplot Showing the Frequency of Dice Outcomes")
ggplot(CardSuit_DF, aes(x = CardShuffleGroup, y = CardPosition, colour = CardSuitGroup)) +
geom_point(size = 3) + labs(x = "Possible Dice Outcomes (1-6)", y = "Frequency",
color = "Data Sources", title = "A Scatterplot Showing the Frequency of Dice Outcomes")
ggplot(CardSuit_DF, aes(x = CardShuffleGroup, y = CardPosition, colour = CardSuitGroup)) +
geom_point(size = 3) + labs(x = "Data Sources", y = "Card Position",
color = "Suits", title = "A Scatterplot Showing the Distribution of Card Suits in Different Shuffle Methods")
#In string form, the values given aren't suitable for visualisation
#First the data can be sorted into the four suits (spades, hearts, clubs, diamonds)
CardSuitGroup <- c()
for (x in CCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in CCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in PCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in PCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in PCard3Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in RealCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in RealCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in RealCard3Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
CardShuffleGroup <- c()
CardPosition <- c()
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'C# Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'C# Seeded Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Python Randint')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Numpy Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Numpy Seeded Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 1')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 2')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 3')
CardPosition <- append(CardPosition, x)
}
CardSuit_DF <- data.frame(CardPosition, CardSuitGroup, CardShuffleGroup)
print(CardSuit_DF)
ggplot(CardSuit_DF, aes(x = CardShuffleGroup, y = CardPosition, colour = CardSuitGroup)) +
geom_point(size = 3) + labs(x = "Data Sources", y = "Card Position",
color = "Suits", title = "A Scatterplot Showing the Distribution of Card Suits in Different Shuffle Methods")
