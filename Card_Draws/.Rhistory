print(Player2Hand)
print("Player 3:")
print(Player3Hand)
print("Player 4:")
print(Player4Hand)
print("Player 5:")
print(Player5Hand)
print("Player 6:")
print(Player6Hand)
}
PokerDealer_Fn(CCard1Values)
#6d) Poker Hand Distribution Simulation
#The Poker Test performed above focused on comparing sequential groups of hands
#In order to compare to a more accurate real world environment, this simulation aims to determine the probability of hand draws based on standard poker rules
#This includes the dealing of cards to multiple players and a greater range of outcomes relating to the cards held in each players hand
#To do this a function will be used that allows for the selection of a shuffled deck
PokerDealer_Fn <- function(InputDeck){
#Once a deck is selected the 'Dealer' will distribute cards between 6 players
#As with the rules of poker, the 'Dealer' will deal 1 card to each 'Player' in turn and repeat until each player has a five card hand
#A 6 player game was chosen as this allows for 30 of the 52 cards in the deck to see play and 5-6 players make for the ideal game of poker
Player1Hand <- c()
Player2Hand <- c()
Player3Hand <- c()
Player4Hand <- c()
Player5Hand <- c()
Player6Hand <- c()
Player1Outcome <- c()
Player2Outcome <- c()
Player3Outcome <- c()
Player4Outcome <- c()
Player5Outcome <- c()
Player6Outcome <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
HasHand <- FALSE
Counter <- 0
MatchCounter <- 0
for (x in 1:5){
Player1Hand <- append(Player1Hand, InputDeck[1])
Player2Hand <- append(Player2Hand, InputDeck[2])
Player3Hand <- append(Player3Hand, InputDeck[3])
Player4Hand <- append(Player4Hand, InputDeck[4])
Player5Hand <- append(Player5Hand, InputDeck[5])
Player6Hand <- append(Player6Hand, InputDeck[6])
for (i in 1:6){
InputDeck <- InputDeck[-1]
}
}
#Evaluation of hands
#Possible outcomes: High Card, Pair, Two Pair, Three of a Kind, Straight, Flush, Full House, Four of a Kind, Straight Flush, Royal Flush
#Player 1
for (i in Player1Hand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
#Check for matching numbers
for (i in Player1Hand){
Counter <- Counter +1
TempHand <- Player1Hand[-Counter]
for (x in TempHand){
if (grepl(substr(x, 1, 1) , substr(i, 1, 1) )){
HasHand <- TRUE
print("Match Found!")
MatchCounter <- MatchCounter + 1
}
}
}
print("Player Hands:")
print("Player 1:")
print(Player1Hand)
print(MatchCounter)
MatchCounter <- 0
print("Player 2:")
print(Player2Hand)
print("Player 3:")
print(Player3Hand)
print("Player 4:")
print(Player4Hand)
print("Player 5:")
print(Player5Hand)
print("Player 6:")
print(Player6Hand)
}
PokerDealer_Fn(CCard1Values)
#6d) Poker Hand Distribution Simulation
#The Poker Test performed above focused on comparing sequential groups of hands
#In order to compare to a more accurate real world environment, this simulation aims to determine the probability of hand draws based on standard poker rules
#This includes the dealing of cards to multiple players and a greater range of outcomes relating to the cards held in each players hand
#To do this a function will be used that allows for the selection of a shuffled deck
PokerDealer_Fn <- function(InputDeck){
#Once a deck is selected the 'Dealer' will distribute cards between 6 players
#As with the rules of poker, the 'Dealer' will deal 1 card to each 'Player' in turn and repeat until each player has a five card hand
#A 6 player game was chosen as this allows for 30 of the 52 cards in the deck to see play and 5-6 players make for the ideal game of poker
Player1Hand <- c()
Player2Hand <- c()
Player3Hand <- c()
Player4Hand <- c()
Player5Hand <- c()
Player6Hand <- c()
Player1Outcome <- c()
Player2Outcome <- c()
Player3Outcome <- c()
Player4Outcome <- c()
Player5Outcome <- c()
Player6Outcome <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
HasHand <- FALSE
Counter <- 0
MatchCounter <- 0
for (x in 1:5){
Player1Hand <- append(Player1Hand, InputDeck[1])
Player2Hand <- append(Player2Hand, InputDeck[2])
Player3Hand <- append(Player3Hand, InputDeck[3])
Player4Hand <- append(Player4Hand, InputDeck[4])
Player5Hand <- append(Player5Hand, InputDeck[5])
Player6Hand <- append(Player6Hand, InputDeck[6])
for (i in 1:6){
InputDeck <- InputDeck[-1]
}
}
#Evaluation of hands
#Possible outcomes: High Card, Pair, Two Pair, Three of a Kind, Straight, Flush, Full House, Four of a Kind, Straight Flush, Royal Flush
#Player 1
for (i in Player1Hand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
#Check for matching numbers
for (i in Player1Hand){
Counter <- Counter +1
TempHand <- Player1Hand[-Counter]
for (x in TempHand){
if (grepl(substr(x, 1, 1) , substr(i, 1, 1) )){
HasHand <- TRUE
print("Match Found!")
MatchCounter <- MatchCounter + 1
}
}
}
print("Player Hands:")
print("Player 1:")
print(Player1Hand)
print(MatchCounter)
MatchCounter <- 0
Counter <- 0
for (i in Player2Hand){
Counter <- Counter +1
TempHand <- Player2Hand[-Counter]
for (x in TempHand){
if (grepl(substr(x, 1, 1) , substr(i, 1, 1) )){
HasHand <- TRUE
print("Match Found!")
MatchCounter <- MatchCounter + 1
}
}
}
print("Player 2:")
print(Player2Hand)
print(MatchCounter)
MatchCounter <- 0
Counter <- 0
print("Player 3:")
print(Player3Hand)
print("Player 4:")
print(Player4Hand)
print("Player 5:")
print(Player5Hand)
print("Player 6:")
print(Player6Hand)
}
PokerDealer_Fn(CCard1Values)
#6d) Poker Hand Distribution Simulation
#The Poker Test performed above focused on comparing sequential groups of hands
#In order to compare to a more accurate real world environment, this simulation aims to determine the probability of hand draws based on standard poker rules
#This includes the dealing of cards to multiple players and a greater range of outcomes relating to the cards held in each players hand
#To do this a function will be used that allows for the selection of a shuffled deck
PokerDealer_Fn <- function(InputDeck){
#Once a deck is selected the 'Dealer' will distribute cards between 6 players
#As with the rules of poker, the 'Dealer' will deal 1 card to each 'Player' in turn and repeat until each player has a five card hand
#A 6 player game was chosen as this allows for 30 of the 52 cards in the deck to see play and 5-6 players make for the ideal game of poker
Player1Hand <- c()
Player2Hand <- c()
Player3Hand <- c()
Player4Hand <- c()
Player5Hand <- c()
Player6Hand <- c()
Player1Outcome <- c()
Player2Outcome <- c()
Player3Outcome <- c()
Player4Outcome <- c()
Player5Outcome <- c()
Player6Outcome <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
HasHand <- FALSE
Counter <- 0
MatchCounter <- 0
for (x in 1:5){
Player1Hand <- append(Player1Hand, InputDeck[1])
Player2Hand <- append(Player2Hand, InputDeck[2])
Player3Hand <- append(Player3Hand, InputDeck[3])
Player4Hand <- append(Player4Hand, InputDeck[4])
Player5Hand <- append(Player5Hand, InputDeck[5])
Player6Hand <- append(Player6Hand, InputDeck[6])
for (i in 1:6){
InputDeck <- InputDeck[-1]
}
}
#Evaluation of hands
#Possible outcomes: High Card, Pair, Two Pair, Three of a Kind, Straight, Flush, Full House, Four of a Kind, Straight Flush, Royal Flush
#Player 1
for (i in Player1Hand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
#Check for matching numbers
for (i in Player1Hand){
Counter <- Counter +1
TempHand <- Player1Hand[-Counter]
for (x in TempHand){
if (grepl(substr(x, 1, 1) , substr(i, 1, 1) )){
HasHand <- TRUE
print("Match Found!")
MatchCounter <- MatchCounter + 1
}
}
}
print("Player Hands:")
print("Player 1:")
print(Player1Hand)
print(MatchCounter)
MatchCounter <- 0
Counter <- 0
for (i in Player2Hand){
Counter <- Counter +1
TempHand <- Player2Hand[-Counter]
for (x in TempHand){
if (grepl(substr(x, 1, 1) , substr(i, 1, 1) )){
HasHand <- TRUE
print("Match Found!")
MatchCounter <- MatchCounter + 1
}
}
}
print("Player 2:")
print(Player2Hand)
print(MatchCounter)
MatchCounter <- 0
Counter <- 0
for (i in Player3Hand){
Counter <- Counter +1
TempHand <- Player3Hand[-Counter]
for (x in TempHand){
if (grepl(substr(x, 1, 1) , substr(i, 1, 1) )){
HasHand <- TRUE
print("Match Found!")
MatchCounter <- MatchCounter + 1
}
}
}
print("Player 3:")
print(Player3Hand)
print(MatchCounter)
MatchCounter <- 0
Counter <- 0
}
PokerDealer_Fn(CCard1Values)
#6d) Poker Hand Distribution Simulation
#The Poker Test performed above focused on comparing sequential groups of hands
#In order to compare to a more accurate real world environment, this simulation aims to determine the probability of hand draws based on standard poker rules
#This includes the dealing of cards to multiple players and a greater range of outcomes relating to the cards held in each players hand
#To do this a function will be used that allows for the selection of a shuffled deck
PokerDealer_Fn <- function(InputDeck){
#Once a deck is selected the 'Dealer' will distribute cards between 6 players
#As with the rules of poker, the 'Dealer' will deal 1 card to each 'Player' in turn and repeat until each player has a five card hand
#A 6 player game was chosen as this allows for 30 of the 52 cards in the deck to see play and 5-6 players make for the ideal game of poker
Player1Hand <- c()
Player2Hand <- c()
Player3Hand <- c()
Player4Hand <- c()
Player5Hand <- c()
Player6Hand <- c()
Player1Outcome <- c()
Player2Outcome <- c()
Player3Outcome <- c()
Player4Outcome <- c()
Player5Outcome <- c()
Player6Outcome <- c()
for (x in 1:5){
Player1Hand <- append(Player1Hand, InputDeck[1])
Player2Hand <- append(Player2Hand, InputDeck[2])
Player3Hand <- append(Player3Hand, InputDeck[3])
Player4Hand <- append(Player4Hand, InputDeck[4])
Player5Hand <- append(Player5Hand, InputDeck[5])
Player6Hand <- append(Player6Hand, InputDeck[6])
for (i in 1:6){
InputDeck <- InputDeck[-1]
}
}
print("Player Hands:")
print("Player 1:")
print(Player1Hand)
print("Player 2:")
print(Player2Hand)
print("Player 3:")
print(Player3Hand)
print("Player 4:")
print(Player4Hand)
print("Player 5:")
print(Player5Hand)
print("Player 6:")
print(Player6Hand)
}
PokerDealer_Fn(CCard1Values)
#Player 1 has a Pair of 7s
#Player 2 has a High Card Queen of Hearts
#Player 3 has a Pair of 3s
#Player 4 has a Pair of Aces
#Player 5 has a High Card King of Clubs
#Player 6 has a Pair of Jacks
PokerDealer_Fn(CCard2Values)
PokerDealer_Fn(PCard1Values)
#Player 1 has High Card
#Player 2 has a Pair
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has a Pair
PokerDealer_Fn(PCard2Values)
#Player 1 has High Card
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has High Card
#Player 5 has a Pair
#Player 6 has High Card
PokerDealer_Fn(PCard3Values)
source("D:/Github/PROJ518/Data_Analysis/RAnalysis.R")
PokerDealer_Fn(RealCard1Values)
#Player 1 has a Pair
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has Two Pair
#Player 6 has a Pair
PokerDealer_Fn(RealCard2Values)
#Player 1 has a Pair
#Player 2 has Two Pair
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has High Card
PokerDealer_Fn(RealCard3Values)
#Player 1 has a Pair
#Player 2 has a High Card
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has a High Card
#Player 6 has a Pair
CCard1DealValues <- c(2,4,0)
#Player 1 has Three of a Kind
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has a Pair
CCard2DealValues <- c(3,3,0)
#Player 1 has High Card
#Player 2 has a Pair
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has a Pair
PCard1DealValues <- c(3,3,0)
#Player 1 has High Card
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has High Card
#Player 5 has a Pair
#Player 6 has High Card
PCard2DealValues <- c(5,1,0)
#Player 1 has a Pair
#Player 2 has a Pair
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has High Card
PCard3DealValues <- c(2,4,0)
#Player 1 has Three of a Kind
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has a Pair
CCard2DealValues <- c(3,2,1)
#Player 1 has a Pair
#Player 2 has a High Card
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has a High Card
#Player 6 has a Pair
CCard1DealValues <- c(2,4,0,0)
#Player 1 has Three of a Kind
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has a Pair
CCard2DealValues <- c(3,2,0,1)
#Player 1 has High Card
#Player 2 has a Pair
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has a Pair
PCard1DealValues <- c(3,3,0,0)
#Player 1 has High Card
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has High Card
#Player 5 has a Pair
#Player 6 has High Card
PCard2DealValues <- c(5,1,0,0)
#Player 1 has a Pair
#Player 2 has a Pair
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has High Card
PCard3DealValues <- c(2,4,0,0)
#Player 1 has a Pair
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has Two Pair
#Player 6 has a Pair
RealCard1DealValues <- c(2,3,1,0)
#Player 1 has a Pair
#Player 2 has Two Pair
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has High Card
RealCard2DealValues <- c(2,3,1,0)
#Player 1 has High Card
#Player 2 has High Card
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has High Card
RealCard3DealValues <- c(4,2,0,0)
CardDealValues <- CCard1DealValues
CardDealValues <- CardDealValues + CCard2DealValues
CardDealValues <- c(2,4,0,0,3,2,0,1,3,3,0,0,5,1,0,0,2,4,0,0,2,3,1,0,2,3,1,0,4,2,0,0)
CardDealOutcomes <- c("High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind")
CardDealSources <- c("C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
PokerDeal_DF <- data.frame(CardDealValues, CardDealOutcomes, CardDealSources)
print(PokerTest_DF)
print(PokerDeal_DF)
ggplot(PokerDeal_DF, aes(x = CardDealSources, y = CardDealValues, fill = factor(CardDealOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerDeal_DF, aes(x = CardDealSources, y = CardDealValues, fill = factor(CardDealOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after non-sequential distribution")
