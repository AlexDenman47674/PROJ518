library(plyr)
library(dplyr)
library(ggplot2)
dh <- dieharder %>% summary(dh)%>% plot(dh)
dh <- dieharder
print(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
library(dgof)
library(randtoolbox)
#6a) Card Draw Distribution Visualisation
#Retrieving the C# card draw data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CCard1Values <- fromJSON(file = "C#CardSim1.json")
CCard2Values <- fromJSON(file = "C#CardSim2.json")
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PCard1Values <- fromJSON(file = "PythonCardSim1.json")
PCard2Values <- fromJSON(file = "PythonCardSim2.json")
PCard3Values <- fromJSON(file = "PythonCardSim3.json")
setwd("D:/Github/PROJ518/Card_Draws")
RealCard1Values <- fromJSON(file = "CardDraw1(Alex).json")
RealCard2Values <- fromJSON(file = "CardDraw2(Ollie).json")
RealCard3Values <- fromJSON(file = "CardDraw3(James).json")
#In string form, the values given aren't suitable for visualisation
#First the data can be sorted into the four suits (spades, hearts, clubs, diamonds)
CardSuitGroup <- c()
for (x in CCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in CCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in PCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in PCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in PCard3Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in RealCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in RealCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in RealCard3Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
CardShuffleGroup <- c()
CardPosition <- c()
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'C# Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'C# Seeded Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Python Randint')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Numpy Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Numpy Seeded Random')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 1')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 2')
CardPosition <- append(CardPosition, x)
}
for (x in 1:52) {
CardShuffleGroup <- append(CardShuffleGroup,'Real Card Shuffle 3')
CardPosition <- append(CardPosition, x)
}
CardSuit_DF <- data.frame(CardPosition, CardSuitGroup, CardShuffleGroup)
print(CardSuit_DF)
ggplot(CardSuit_DF, aes(x = CardShuffleGroup, y = CardPosition, colour = CardSuitGroup)) +
geom_point(size = 3) + labs(x = "Data Sources", y = "Card Position",
color = "Suits", title = "A Scatterplot Showing the Distribution of Card Suits in Different Shuffle Methods")
#6b) The Poker Test of Card Draw Data
#The Poker Test is designed to evaluate the patterns in n groups of 5 successive values, replicating possible poker hands
#The decks used for this test consist only of a traditional 52 cards, divided evenly into the four suits
#The hands to be examined consist of either one pair, two pairs, three of a kind, full house (3 of a kind and a pair), four of a kind or a flush/five of a kind
#While in an actual game of poker other hands can be made that relate to the card value not just the suit for the sake of this test only the suit will be taken into account
#In addition as this test compares successive groups of 5 cards and each deck contains 52 cards, cards 51 and 52 will be noted and excluded from testing
#The suit of these cards will be taken into consideration and the probability of the respective suits will be adjusted accordingly
print(CCard1Values)
CCard1PT <- CCard1Values[-52]
CCard1PT <- CCard1PT[-51]
#CCard1 removed 6 of Clubs and King of Diamonds
print(CCard2Values)
CCard2PT <- CCard2Values[-52]
CCard2PT <- CCard2PT[-51]
print(PCard1Values)
PCard1PT <- PCard1Values[-52]
PCard1PT <- PCard1PT[-51]
#PCard1 removed 10 of Hearts and 3 of Clubs
print(PCard2Values)
PCard2PT <- PCard2Values[-52]
PCard2PT <- PCard2PT[-51]
#PCard2 removed 4 of Clubs and King of Diamonds
print(PCard3Values)
PCard3PT <- PCard3Values[-52]
PCard3PT <- PCard3PT[-51]
print(RealCard1Values)
RealCard1PT <- RealCard1Values[-52]
RealCard1PT <- RealCard1PT[-51]
#RealCard1 removed King of Hearts and Queen of Hearts
print(RealCard2Values)
RealCard2PT <- RealCard2Values[-52]
RealCard2PT <- RealCard2PT[-51]
#RealCard2 removed 8 of Diamonds and 7 of Diamonds
print(RealCard3Values)
RealCard3PT <- RealCard3Values[-52]
RealCard3PT <- RealCard3PT[-51]
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
#The function will then print the results
print(paste("Group", x))
print(paste("Number of Spades:", SpadeCount))
print(paste("Number of Hearts:", HeartCount))
print(paste("Number of Clubs:", ClubCount))
print(paste("Number of Diamonds:", DiamondCount))
#Finally the function will remove the first five cards from the deck
InputDeck <- InputDeck[-1]
InputDeck <- InputDeck[-1]
InputDeck <- InputDeck[-1]
InputDeck <- InputDeck[-1]
InputDeck <- InputDeck[-1]
}
}
PokerTest_function(CCard1PT)
#The results of the PokerTest for CCard1:
#Pair(Diamonds), Two Pair(Spades,Clubs), 3 of a kind(Clubs), Two Pair(Hearts,Clubs), 3 of a kind(Spades)
#Two Pair(Spades,Hearts), Two Pair(Hearts,Diamonds), Two Pair(Spades,Clubs), Full House(Diamonds,Hearts), Two Pair(Hearts, Diamonds)
PokerTest_function(CCard2PT)
PokerTest_function(PCard1PT)
#The results of the PokerTest for PCard1:
#3 of a kind(Clubs), Full House(Hearts,Spades), Two Pair(Spades,Diamonds), 3 of a kind(Clubs), Pair(Hearts)
#Pair(Hearts), Pair(Hearts), Two Pair(Spades,Diamonds), Full House(Spades,Clubs), 4 of a kind(Diamonds)
PokerTest_function(PCard2PT)
#The results of the PokerTest for PCard2:
#Two Pair(Spades,Diamonds), 3 of a kind(Hearts), 4 of a kind(Spades), 3 of a kind(Hearts), 3 of a kind(Spades)
#Two Pair(Hearts, Diamonds), 3 of a kind(Diamonds), Two Pair(Hearts,Clubs), Full House(Diamonds,Clubs), 3 of a kind(Clubs)
PokerTest_function(PCard3PT)
PokerTest_function(RealCard1PT)
#The results of the PokerTest for RealCard1:
#4 of a kind(Hearts), Full House(Diamonds,Clubs), 3 of a kind(Diamonds), 5 of a kind(Clubs), Full House(Clubs,Diamonds)
#4 of a kind(Hearts), 4 of a kind(Spades), 4 of a kind(Spades), 3 of a kind(Spades), Pair(Diamonds)
PokerTest_function(RealCard2PT)
#The results of the PokerTest for RealCard2:
#Two Pair(Hearts,Diamonds), Two Pair(Spades, Hearts), Pair(Clubs), 4 of a kind(Diamonds), 3 of a kind(Spades)
#3 of a kind(Hearts), Full House(Diamonds,Spades), Pair(Hearts), Full House(Clubs,Spades), 3 of a kind(Clubs)
PokerTest_function(RealCard3PT)
#6c) Visualisation
CardOutcomes <-c(1,6,2,1,0,0,
2,4,4,0,0,0,
3,2,2,2,1,0,
0,3,5,1,1,0,
1,5,0,1,2,0,
1,0,2,2,4,1,
2,2,3,2,1,0,
0,2,5,1,1,1)
HandOutcomes <-c("Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind")
CardSources <-c("C# Random","C# Random","C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint","Python Randint","Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
PokerTest_DF <- data.frame(CardOutcomes, HandOutcomes, CardSources)
print(PokerTest_DF)
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
#6d) Poker Hand Distribution Simulation
#The Poker Test performed above focused on comparing sequential groups of hands
#In order to compare to a more accurate real world environment, this simulation aims to determine the probability of hand draws based on standard poker rules
#This includes the dealing of cards to multiple players and a greater range of outcomes relating to the cards held in each players hand
#To do this a function will be used that allows for the selection of a shuffled deck
PokerDealer_Fn <- function(InputDeck){
#Once a deck is selected the 'Dealer' will distribute cards between 6 players
#As with the rules of poker, the 'Dealer' will deal 1 card to each 'Player' in turn and repeat until each player has a five card hand
#A 6 player game was chosen as this allows for 30 of the 52 cards in the deck to see play and 5-6 players make for the ideal game of poker
Player1Hand <- c()
Player2Hand <- c()
Player3Hand <- c()
Player4Hand <- c()
Player5Hand <- c()
Player6Hand <- c()
Player1Outcome <- c()
Player2Outcome <- c()
Player3Outcome <- c()
Player4Outcome <- c()
Player5Outcome <- c()
Player6Outcome <- c()
for (x in 1:5){
Player1Hand <- append(Player1Hand, InputDeck[1])
Player2Hand <- append(Player2Hand, InputDeck[2])
Player3Hand <- append(Player3Hand, InputDeck[3])
Player4Hand <- append(Player4Hand, InputDeck[4])
Player5Hand <- append(Player5Hand, InputDeck[5])
Player6Hand <- append(Player6Hand, InputDeck[6])
for (i in 1:6){
InputDeck <- InputDeck[-1]
}
}
print("Player Hands:")
print("Player 1:")
print(Player1Hand)
print("Player 2:")
print(Player2Hand)
print("Player 3:")
print(Player3Hand)
print("Player 4:")
print(Player4Hand)
print("Player 5:")
print(Player5Hand)
print("Player 6:")
print(Player6Hand)
}
PokerDealer_Fn(CCard1Values)
#Player 1 has a Pair
#Player 2 has a High Card
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has a High Card
#Player 6 has a Pair
PokerDealer_Fn(CCard2Values)
PokerDealer_Fn(PCard1Values)
#Player 1 has High Card
#Player 2 has a Pair
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has a Pair
PokerDealer_Fn(PCard2Values)
#Player 1 has High Card
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has High Card
#Player 5 has a Pair
#Player 6 has High Card
PokerDealer_Fn(PCard3Values)
PokerDealer_Fn(RealCard1Values)
#Player 1 has a Pair
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has Two Pair
#Player 6 has a Pair
PokerDealer_Fn(RealCard2Values)
#Player 1 has a Pair
#Player 2 has Two Pair
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has High Card
PokerDealer_Fn(RealCard3Values)
#Visualisation
CardDealValues <- c(2,4,0,0,3,2,0,1,3,3,0,0,5,1,0,0,2,4,0,0,2,3,1,0,2,3,1,0,4,2,0,0)
CardDealOutcomes <- c("High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind")
CardDealSources <- c("C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
PokerDeal_DF <- data.frame(CardDealValues, CardDealOutcomes, CardDealSources)
print(PokerDeal_DF)
ggplot(PokerDeal_DF, aes(x = CardDealSources, y = CardDealValues, fill = factor(CardDealOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after non-sequential distribution")
#6e) 'Texas Hold Em' Style Card Distribution
#Similarly to the above simulation, this simulation aims to evaluate Poker hand outcomes when using a non-sequential distribution method
#In Texas Hold Em each player is given a two card hand and five cards form a communal river
#The flop (the starting 3 communal cards) are dealt after each players hand, then the remaining two cards (the turn and finally the river) are dealt after rounds of betting
#As this is only a distribution simulation and no other cards can be dealt, all 5 communal cards will be dealt at once
#Hands are decided using a combination of the player's hand and the river although hands can still only be five cards
TexasDealer_Fn <- function(InputDeck){
Player1Hand <- c()
Player2Hand <- c()
Player3Hand <- c()
Player4Hand <- c()
Player5Hand <- c()
Player6Hand <- c()
TheRiver <- c()
for (x in 1:2){
Player1Hand <- append(Player1Hand, InputDeck[1])
Player2Hand <- append(Player2Hand, InputDeck[2])
Player3Hand <- append(Player3Hand, InputDeck[3])
Player4Hand <- append(Player4Hand, InputDeck[4])
Player5Hand <- append(Player5Hand, InputDeck[5])
Player6Hand <- append(Player6Hand, InputDeck[6])
for (i in 1:6){
InputDeck <- InputDeck[-1]
}
}
for (x in 1:5){
TheRiver <- append(TheRiver, InputDeck[1])
InputDeck <- InputDeck[-1]
}
print("Player Hands:")
print("Player 1:")
print(Player1Hand)
print("Player 2:")
print(Player2Hand)
print("Player 3:")
print(Player3Hand)
print("Player 4:")
print(Player4Hand)
print("Player 5:")
print(Player5Hand)
print("Player 6:")
print(Player6Hand)
print("The River")
print(TheRiver)
}
TexasDealer_Fn(CCard1Values)
#Player 1 has a Pair
#Player 2 has a Pair
#Player 3 has Two Pair
#Player 4 has a Pair
#Player 5 has Three of a Kind
#Player 6 has a Pair
TexasDealer_Fn(CCard2Values)
#Player 1 has a Pair
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has Two Pair
#Player 5 has High Card
#Player 6 has a Pair
TexasDealer_Fn(PCard1Values)
#Player 1 has a Pair
#Player 2 has a Pair
#Player 3 has a Pair
#Player 4 has Two Pair
#Player 5 has Three of a Kind
#Player 6 has Two Pair
TexasDealer_Fn(PCard2Values)
#Player 1 has High Card
#Player 2 has High Card
#Player 3 has Two Pair
#Player 4 has a Pair
#Player 5 has a Flush
#Player 6 has a Pair
TexasDealer_Fn(PCard3Values)
TexasDealer_Fn(RealCard1Values)
#Player 1 has Two Pair
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has High Card
#Player 5 has a Pair
#Player 6 has High Card
TexasDealer_Fn(RealCard2Values)
#Player 1 has Two Pair
#Player 2 has High Card
#Player 3 has a Pair
#Player 4 has High Card
#Player 5 has a Pair
#Player 6 has a Pair
TexasDealer_Fn(RealCard3Values)
CardDealValues <- c(0,4,1,1,0,3,2,1,0,0,0,4,2,1,0,2,2,1,0,1,2,4,0,0,0,4,1,1,0,0,2,3,1,0,0,0,1,0,0,5)
TexasDealValues <- c(0,4,1,1,0,3,2,1,0,0,0,4,2,1,0,2,2,1,0,1,2,4,0,0,0,4,1,1,0,0,2,3,1,0,0,0,1,0,0,5)
TexasDealOutcomes <- c("High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush")
TexasDealSources <- c("C# Random","C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint", "Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
TexasDeal_DF <- data.frame(TexasDealValues, TexasDealOutcomes, TexasDealSources)
print(TexasDeal_DF)
ggplot(TexasDeal_DF, aes(x = TexasDealSources, y = TexasDealValues, fill = factor(TexasDealOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind","Flush"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind","Flush")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after alternative non-sequential distribution")
