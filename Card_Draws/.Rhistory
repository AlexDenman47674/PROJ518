#A standard game of poker is played with a deck of 52 cards, although some games play with 2 'wildcard' jokers that allow for five of a kind outcomes
#The decks used for this test consist only of a traditional 52 cards, divided evenly into the four suits
#The hands to be examined consist of either one pair, two pairs, three of a kind, full house (3 of a kind and a pair) or four of a kind
#While in an actual game of poker other hands can be made that relate to the card value not just the suit for the sake of this test only the suit will be taken into account
#In addition as this test compares successive groups of 5 cards and each deck contains 52 cards, cards 51 and 52 will be noted and excluded from testing
#The suit of these cards will be taken into consideration and the probability of the respective suits will be adjusted accordingly
CCard1PT <- CCard1Values[-52]
CCard1PT <- CCard1PT[-51]
print(CCard1PT)
#CCard1 removed 6 of Clubs and King of Diamonds
print(CCard2Values)
CCard1PT <- CCard1Values[-52]
CCard1PT <- CCard1PT[-51]
CCard2PT <- CCard2Values[-52]
CCard2PT <- CCard2PT[-51]
print(PCard1Values)
PCard1PT <- PCard1Values[-52]
PCard1PT <- PCard1PT[-51]
#PCard1 removed 10 of Hearts and 3 of Clubs
print(PCard2Values)
PCard2PT <- PCard2Values[-52]
PCard2PT <- PCard2PT[-51]
#PCard2 removed 4 of Clubs and King of Diamonds
print(PCard3Values)
PCard3PT <- PCard3Values[-52]
PCard3PT <- PCard3PT[-51]
print(RealCard1Values)
RealCard1PT <- RealCard1Values[-52]
RealCard1PT <- RealCard1PT[-51]
#RealCard1 removed King of Hearts and Queen of Hearts
print(RealCard2Values)
RealCard2PT <- RealCard2Values[-52]
RealCard2PT <- RealCard2PT[-51]
#RealCard2 removed 8 of Diamonds and 7 of Diamonds
print(RealCard3Values)
RealCard3PT <- RealCard3Values[-52]
RealCard3PT <- RealCard3PT[-51]
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
}
}
PokerTest_function(CCard1PT)
#To better automate this process a function will be used that allows for the choice of deck to be input
TempHand <- c()
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
}
}
PokerTest_function(CCard1PT)
print(TempHand)
PokerTest_function(CCard1PT)
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
print(TempHand)
}
}
PokerTest_function(CCard1PT)
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", i)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", i)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", i)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
}
}
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
}
}
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
print(SpadeCount)
print(HeartCount)
print(ClubCount)
print(DiamondCount)
}
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
print(SpadeCount)
print(HeartCount)
print(ClubCount)
print(DiamondCount)
}
}
PokerTest_function(CCard1PT)
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
print("Number of Spades", SpadeCount)
print("Number of Hearts", HeartCount)
print("Number of Clubs", ClubCount)
print("Number of Diamonds", DiamondCount)
}
}
PokerTest_function(CCard1PT)
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
print("Number of Spades" + SpadeCount)
print("Number of Hearts", HeartCount)
print("Number of Clubs", ClubCount)
print("Number of Diamonds", DiamondCount)
}
}
PokerTest_function(CCard1PT)
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
print(paste("Number of Spades", SpadeCount))
print(paste("Number of Hearts", HeartCount))
print(paste("Number of Clubs", ClubCount))
print(paste("Number of Diamonds", DiamondCount))
}
}
PokerTest_function(CCard1PT)
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
print(paste("Group", x))
print(paste("Number of Spades:", SpadeCount))
print(paste("Number of Hearts:", HeartCount))
print(paste("Number of Clubs:", ClubCount))
print(paste("Number of Diamonds:", DiamondCount))
}
}
PokerTest_function(CCard1PT)
#To better automate this process a function will be used that allows for the choice of deck to be input
PokerTest_function <- function(InputDeck) {
for (x in 1:10){
#The function will first empty the hand, then draw the first five cards from the input deck
TempHand <- c()
SpadeCount <- 0
HeartCount <- 0
ClubCount <- 0
DiamondCount <- 0
TempHand <- append(TempHand, InputDeck[1])
TempHand <- append(TempHand, InputDeck[2])
TempHand <- append(TempHand, InputDeck[3])
TempHand <- append(TempHand, InputDeck[4])
TempHand <- append(TempHand, InputDeck[5])
#The function will then identify the suit of each card
for (i in TempHand){
if (grepl("of Spades", i)) {
SpadeCount <- SpadeCount + 1
}else if (grepl("of Hearts", i)){
HeartCount <- HeartCount + 1
}else if (grepl("of Clubs", i)){
ClubCount <- ClubCount + 1
}else if (grepl("of Diamonds", i)){
DiamondCount <- DiamondCount + 1
}
}
#The function will then print the results
print(paste("Group", x))
print(paste("Number of Spades:", SpadeCount))
print(paste("Number of Hearts:", HeartCount))
print(paste("Number of Clubs:", ClubCount))
print(paste("Number of Diamonds:", DiamondCount))
#Finally the function will remove the first five cards from the deck
InputDeck <- InputDeck[-1]
InputDeck <- InputDeck[-1]
InputDeck <- InputDeck[-1]
InputDeck <- InputDeck[-1]
InputDeck <- InputDeck[-1]
}
}
PokerTest_function(CCard1PT)
#The results of the PokerTest for CCard1:
#Pair(Diamonds), Two Pair(Spades,Clubs), 3 of a kind(Clubs), Two Pair(Hearts,Clubs), 3 of a kind(Spades)
#Two Pair(Spades,Hearts), Two Pair(Hearts,Diamonds), Two Pair(Spades,Clubs), Full House(Diamonds,Hearts), Two Pair(Hearts, Diamonds)
PokerTest_function(CCard2PT)
#The results of the PokerTest for CCard2:
#Pair(Spades), 3 of a kind(Hearts), 3 of a kind(Diamonds), 3 of a kind(Clubs), Two Pair(Clubs,Diamonds)
#Two Pair(Hearts,Clubs), Two Pair(Clubs,Diamonds), Two Pair(Spades,Hearts), Pair(Spades), Three of a kind(Spades)
PokerTest_function(PCard1PT)
#The results of the PokerTest for PCard1:
#3 of a kind(Clubs), Full House(Hearts,Spades), Two Pair(Spades,Diamonds), 3 of a kind(Clubs), Pair(Hearts)
#Pair(Hearts), Pair(Hearts), Two Pair(Spades,Diamonds), Full House(Spades,Clubs), 4 of a kind(Diamonds)
PokerTest_function(PCard2PT)
#The results of the PokerTest for PCard2:
#Two Pair(Spades,Diamonds), 3 of a kind(Hearts), 4 of a kind(Spades), 3 of a kind(Hearts), 3 of a kind(Spades)
#Two Pair(Hearts, Diamonds), 3 of a kind(Diamonds), Two Pair(Hearts,Clubs), Full House(Diamonds,Clubs), 3 of a kind(Clubs)
PokerTest_function(PCard3PT)
PokerTest_function(RealCard1PT)
#The results of the PokerTest for RealCard1:
#4 of a kind(Hearts), Full House(Diamonds,Clubs), 3 of a kind(Diamonds), 5 of a kind(Clubs), Full House(Clubs,Diamonds)
#4 of a kind(Hearts), 4 of a kind(Spades), 4 of a kind(Spades), 3 of a kind(Spades), Pair(Diamonds)
PokerTest_function(RealCard2PT)
#The results of the PokerTest for RealCard2:
#Two Pair(Hearts,Diamonds), Two Pair(Spades, Hearts), Pair(Clubs), 4 of a kind(Diamonds), 3 of a kind(Spades)
#3 of a kind(Hearts), Full House(Diamonds,Spades), Pair(Hearts), Full House(Clubs,Spades), 3 of a kind(Clubs)
PokerTest_function(RealCard3PT)
CardOutcomes <-c(1,6,2,1,0,0,
2,4,4,0,0,0,
3,2,2,2,1,0,
0,3,5,1,1,0,
1,5,0,1,2,0,
1,0,2,2,4,1,
2,2,3,2,1,0,
0,2,5,1,1,1)
HandOutcomes <-c("Pair","Two Pair","Three of a Kind","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Four of a Kind","Five of a Kind")
HandOutcomes <-c("Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind")
CardSources <-c()
CardSources <-c("C# Random","C# Random","C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint","Python Randint","Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
PokerTest_DF <- data.frame(CardOutcomes, HandOutcomes, CardSources)
print(PokerTest_DF)
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.5, position="dodge") +
scale_fill_discrete(name="Possible Coin Outcomes",breaks=c(0, 1),labels=c("Heads", "Tails")) + labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Coin Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.5, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c(0, 1),labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Coin Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.5, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c(0, 1),labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Coin Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.5, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c(0, 1, 2, 3, 4, 5),labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Coin Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.5, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Coin Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=1, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Coin Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Coin Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
+ theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerTest_DF, aes(x = reorder(CardSources, HandOutcomes), y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerTest_DF, aes(x = reorder(CardSources, CardSources), y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerTest_DF, aes(x = reorder(CardSources, HandOutcomes), y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerTest_DF, aes(x = reorder(CardSources, -HandOutcomes), y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerTest_DF, aes(x = reorder(CardSources, HandOutcomes), y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
