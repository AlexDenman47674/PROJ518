#The results of the PokerTest for PCard2:
#Two Pair(Spades,Diamonds), 3 of a kind(Hearts), 4 of a kind(Spades), 3 of a kind(Hearts), 3 of a kind(Spades)
#Two Pair(Hearts, Diamonds), 3 of a kind(Diamonds), Two Pair(Hearts,Clubs), Full House(Diamonds,Clubs), 3 of a kind(Clubs)
PokerTest_function(PCard3PT)
PokerTest_function(RealCard1PT)
#The results of the PokerTest for RealCard1:
#4 of a kind(Hearts), Full House(Diamonds,Clubs), 3 of a kind(Diamonds), 5 of a kind(Clubs), Full House(Clubs,Diamonds)
#4 of a kind(Hearts), 4 of a kind(Spades), 4 of a kind(Spades), 3 of a kind(Spades), Pair(Diamonds)
PokerTest_function(RealCard2PT)
#The results of the PokerTest for RealCard2:
#Two Pair(Hearts,Diamonds), Two Pair(Spades, Hearts), Pair(Clubs), 4 of a kind(Diamonds), 3 of a kind(Spades)
#3 of a kind(Hearts), Full House(Diamonds,Spades), Pair(Hearts), Full House(Clubs,Spades), 3 of a kind(Clubs)
PokerTest_function(RealCard3PT)
#6c) Visualisation
CardOutcomes <-c(1,6,2,1,0,0,
2,4,4,0,0,0,
3,2,2,2,1,0,
0,3,5,1,1,0,
1,5,0,1,2,0,
1,0,2,2,4,1,
2,2,3,2,1,0,
0,2,5,1,1,1)
HandOutcomes <-c("Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind")
CardSources <-c("C# Random","C# Random","C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint","Python Randint","Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
PokerTest_DF <- data.frame(CardOutcomes, HandOutcomes, CardSources)
print(PokerTest_DF)
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes, levels = c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind")))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
#6d) Poker Hand Distribution Simulation
#The Poker Test performed above focused on comparing sequential groups of hands
#In order to compare to a more accurate real world environment, this simulation aims to determine the probability of hand draws based on standard poker rules
#This includes the dealing of cards to multiple players and a greater range of outcomes relating to the cards held in each players hand
#To do this a function will be used that allows for the selection of a shuffled deck
PokerDealer_Fn <- function(InputDeck){
#Once a deck is selected the 'Dealer' will distribute cards between 6 players
#As with the rules of poker, the 'Dealer' will deal 1 card to each 'Player' in turn and repeat until each player has a five card hand
#A 6 player game was chosen as this allows for 30 of the 52 cards in the deck to see play and 5-6 players make for the ideal game of poker
Player1Hand <- c()
Player2Hand <- c()
Player3Hand <- c()
Player4Hand <- c()
Player5Hand <- c()
Player6Hand <- c()
for (x in 1:5){
Player1Hand <- append(Player1Hand, InputDeck[1])
Player2Hand <- append(Player2Hand, InputDeck[2])
Player3Hand <- append(Player3Hand, InputDeck[3])
Player4Hand <- append(Player4Hand, InputDeck[4])
Player5Hand <- append(Player5Hand, InputDeck[5])
Player6Hand <- append(Player6Hand, InputDeck[6])
for (i in 1:6){
InputDeck <- InputDeck[-1]
}
}
print("Player Hands:")
print("Player 1:")
print(Player1Hand)
print("Player 2:")
print(Player2Hand)
print("Player 3:")
print(Player3Hand)
print("Player 4:")
print(Player4Hand)
print("Player 5:")
print(Player5Hand)
print("Player 6:")
print(Player6Hand)
}
PokerDealer_Fn(CCard1Values)
#Player 1 has a Pair
#Player 2 has a High Card
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has a High Card
#Player 6 has a Pair
PokerDealer_Fn(CCard2Values)
PokerDealer_Fn(PCard1Values)
#Player 1 has High Card
#Player 2 has a Pair
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has a Pair
PokerDealer_Fn(PCard2Values)
#Player 1 has High Card
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has High Card
#Player 5 has a Pair
#Player 6 has High Card
PokerDealer_Fn(PCard3Values)
PokerDealer_Fn(RealCard1Values)
#Player 1 has a Pair
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has a Pair
#Player 5 has Two Pair
#Player 6 has a Pair
PokerDealer_Fn(RealCard2Values)
#Player 1 has a Pair
#Player 2 has Two Pair
#Player 3 has a Pair
#Player 4 has a Pair
#Player 5 has High Card
#Player 6 has High Card
PokerDealer_Fn(RealCard3Values)
#Visualisation
CardDealValues <- c(2,4,0,0,3,2,0,1,3,3,0,0,5,1,0,0,2,4,0,0,2,3,1,0,2,3,1,0,4,2,0,0)
CardDealOutcomes <- c("High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind")
CardDealSources <- c("C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
PokerDeal_DF <- data.frame(CardDealValues, CardDealOutcomes, CardDealSources)
print(PokerDeal_DF)
ggplot(PokerDeal_DF, aes(x = CardDealSources, y = CardDealValues, fill = factor(CardDealOutcomes, levels = c("High Card","Pair", "Two Pair", "Three of a Kind")))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after non-sequential distribution")
#6e) 'Texas Hold Em' Style Card Distribution
#Similarly to the above simulation, this simulation aims to evaluate Poker hand outcomes when using a non-sequential distribution method
#In Texas Hold Em each player is given a two card hand and five cards form a communal river
#The flop (the starting 3 communal cards) are dealt after each players hand, then the remaining two cards (the turn and finally the river) are dealt after rounds of betting
#As this is only a distribution simulation and no other cards can be dealt, all 5 communal cards will be dealt at once
#Hands are decided using a combination of the player's hand and the river although hands can still only be five cards
TexasDealer_Fn <- function(InputDeck){
Player1Hand <- c()
Player2Hand <- c()
Player3Hand <- c()
Player4Hand <- c()
Player5Hand <- c()
Player6Hand <- c()
TheRiver <- c()
for (x in 1:2){
Player1Hand <- append(Player1Hand, InputDeck[1])
Player2Hand <- append(Player2Hand, InputDeck[2])
Player3Hand <- append(Player3Hand, InputDeck[3])
Player4Hand <- append(Player4Hand, InputDeck[4])
Player5Hand <- append(Player5Hand, InputDeck[5])
Player6Hand <- append(Player6Hand, InputDeck[6])
for (i in 1:6){
InputDeck <- InputDeck[-1]
}
}
for (x in 1:5){
TheRiver <- append(TheRiver, InputDeck[1])
InputDeck <- InputDeck[-1]
}
print("Player Hands:")
print("Player 1:")
print(Player1Hand)
print("Player 2:")
print(Player2Hand)
print("Player 3:")
print(Player3Hand)
print("Player 4:")
print(Player4Hand)
print("Player 5:")
print(Player5Hand)
print("Player 6:")
print(Player6Hand)
print("The River")
print(TheRiver)
}
TexasDealer_Fn(CCard1Values)
#Player 1 has a Pair
#Player 2 has a Pair
#Player 3 has Two Pair
#Player 4 has a Pair
#Player 5 has Three of a Kind
#Player 6 has a Pair
TexasDealer_Fn(CCard2Values)
TexasDealer_Fn(PCard1Values)
#Player 1 has a Pair
#Player 2 has a Pair
#Player 3 has a Pair
#Player 4 has Two Pair
#Player 5 has Three of a Kind
#Player 6 has Two Pair
TexasDealer_Fn(PCard2Values)
#Player 1 has High Card
#Player 2 has High Card
#Player 3 has Two Pair
#Player 4 has a Pair
#Player 5 has a Flush
#Player 6 has a Pair
TexasDealer_Fn(PCard3Values)
TexasDealer_Fn(RealCard1Values)
#Player 1 has Two Pair
#Player 2 has High Card
#Player 3 has High Card
#Player 4 has High Card
#Player 5 has a Pair
#Player 6 has High Card
TexasDealer_Fn(RealCard2Values)
#Player 1 has Two Pair
#Player 2 has High Card
#Player 3 has a Pair
#Player 4 has High Card
#Player 5 has a Pair
#Player 6 has a Pair
TexasDealer_Fn(RealCard3Values)
#Visualisation
TexasDealValues <- c(0,4,1,1,0,3,2,1,0,0,0,4,2,1,0,2,2,1,0,1,2,4,0,0,0,4,1,1,0,0,2,3,1,0,0,0,1,0,0,5)
TexasDealOutcomes <- c("High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush")
TexasDealSources <- c("C# Random","C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint", "Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
TexasDeal_DF <- data.frame(TexasDealValues, TexasDealOutcomes, TexasDealSources)
print(TexasDeal_DF)
ggplot(TexasDeal_DF, aes(x = TexasDealSources, y = TexasDealValues, fill = factor(TexasDealOutcomes, levels = c("High Card","Pair", "Two Pair", "Three of a Kind","Flush")))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind","Flush"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind","Flush")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after alternative non-sequential distribution")
#7a) Run Test of Rand Data
#The Runs Test examines sequences of random numbers for 'Runs Up' (Where the sequence increases) and 'Runs Down' (where the sequence decreases)
#The P-Value generated is compared against a 0.05 significance level, if greater then the sequence can be considered random, if less then the sequence can be considered non-random
#As this test can be used on any data set, no alterations need to be made to the data sequences used
print(runs.test(CRand1Values))
#CRand1 had a test statistic of 1.7118 and a p-value of 0.08693
print(runs.test(CRand2Values))
#CRand2 had a test statistic of -1.2151 and a p-value of 0.2243
print(runs.test(CRand3Values))
print(runs.test(PRand1Values))
#PRand1 had a test statistic of 0.36778 and a p-value of 0.713
print(runs.test(PRand2Values))
#PRand2 had a test statistic of 0.44766 and a p-value of 0.6544
print(runs.test(PRand3Values))
#PRand3 had a test statistic of -0.62673 and a p-value of 0.5308
print(runs.test(PRand4Values))
#PRand4 had a test statistic of 0.00036468 and a p-value of 0.9997
print(runs.test(PRand5Values))
print(runs.test(JSRandValues))
print(runs.test(RndRandValues))
print(runs.test(LehmerInt1Values))
#LehmerInt1 had a test statistic of 0.2686 and a p-value of 0.7882
print(runs.test(LehmerInt2Values))
#LehmerInt2 had a test statistic of 1.9697 and a p-value of 0.04887
print(runs.test(LehmerReal1Values))
#LehmerReal1 had a test statistic of -0.35813 and a p-value of 0.7202
print(runs.test(LehmerReal2Values))
print(runs.test(MSRandValues))
print(runs.test(ParkRandValues))
#ParkRand had a test statistic of -20.951 and a p-value of 2.2e-16
print(runs.test(RoundaboutRandValues))
#RoundaboutRand had a test statistic of -20.454 and a p-value of 2.2e-16
print(runs.test(SeaRandValues))
#7b) Visualisation
RunsPValue <- c(0.08693, 0.2243, 0.3229, 0.713, 0.6544, 0.5308, 0.9997, 0.3706, 0.3018, 0.05256, 0.7882, 0.04887, 0.7202, 0.6544)
RunsPGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2")
RunsP_DF <- data.frame(RunsPValue, RunsPGroup)
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue, vjust = -0.5))
#8a) Serial Correlation Test of Rand Data
#The Serial Correlation Test evaluates the serial correlation coefficient of a data set which is a measure of dependancy
#Test Statistic values closer to 0 show that the data is relatively independent of each other
serialCorrelationTest(CRand1Values)
#CRand1 has a Test Statistic of 1.6 and a p-value of 0.11
serialCorrelationTest(CRand2Values)
#Crand2 has a Test Statistic of -0.84 and a p-value of 0.4
serialCorrelationTest(CRand3Values)
serialCorrelationTest(PRand1Values)
#PRand1 has a Test Statistic of 0.68 and a p-value of 0.5
serialCorrelationTest(PRand2Values)
#PRand2 has a Test Statistic of -0.082 and a p-value of 0.93
serialCorrelationTest(PRand3Values)
#PRand3 has a Test Statistic of -0.43 and a p-value of 0.67
serialCorrelationTest(PRand4Values)
#PRand4 has a Test Statistic of 1.2 and a p-value of 0.24
serialCorrelationTest(PRand5Values)
serialCorrelationTest(JSRandValues)
serialCorrelationTest(RndRandValues)
serialCorrelationTest(LehmerInt1Values)
#LehmerInt1 has a Test Statistic of 0.6 and a p-value of 0.55
serialCorrelationTest(LehmerInt2Values)
#LehmerInt2 has a Test Statistic of -0.039 and a p-value of 0.97
serialCorrelationTest(LehmerReal1Values)
#LehmerReal1 has a Test Statistic of -0.14 and a p-value of 0.89
serialCorrelationTest(LehmerReal2Values)
serialCorrelationTest(MSRandValues)
serialCorrelationTest(ParkRandValues)
#ParkRand has a Test Statistic of -22 and a p-value of 0
serialCorrelationTest(RoundaboutRandValues)
#RoundaboutRand has a Test Statistic of -22 and a p-value of 0
serialCorrelationTest(SeaRandValues)
#8b) Visualisation
SerialTValue <- c(1.6,-0.84,-0.96,0.68,-0.082,-0.43,1.2,1.8,-0.7,-2.9,0.6,-0.039,-0.14,0.29,2.2)
SerialTPValue <- c(0.11,0.4,0.34,0.5,0.93,0.67,0.24,0.079,0.49,0.0039,0.55,0.97,0.89,0.78,0.025)
SerialTGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2", "Middle Square Method")
SerialT_DF <- data.frame(SerialTValue, SerialTPValue, SerialTGroup)
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialTPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) +geom_text(hjust=0.4, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing") + theme(legend.position = "none")
#9a) Birthday Spacings Test of Rand Data
#The Birthday Spacings Test works by choosing m birthdays from a year composed of n days then looking at the number of repetitions of spacing values
#The test evaluates the distribution of a data set and whether it fits a normal distribution
#The Birthday Spacings Test provides results for KS distribution, Anderson-Darling distribution and Chi-Square distribution
#The output to be represented is the Anderson-Darling Test Statistic and Result
#A Result of 1 is considers the sequence to be a normal distribution, while a result of 0 is considered non-normal distribution
#As the sequences being used are designed to replicate randomness, non-normal distribution is expected here
B <- 16
m <- 32
n <- 2^B
lambda <- (m^3)/(4*n)
alpha <- 0.05
print(birthday.spacings(CRand1Values,m,n,alpha,lambda,num.class = 100))
#CRand1 had a Test Statistic of 15.172 and an AD result of 0
print(birthday.spacings(CRand2Values,m,n,alpha,lambda,num.class = 100))
#CRand2 had a Test Statistic of 15.013 and an AD result of 0
print(birthday.spacings(CRand3Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(PRand1Values,m,n,alpha,lambda,num.class = 100))
#PRand1 had a Test Statistic of 14.739 and an AD result of 0
print(birthday.spacings(PRand2Values,m,n,alpha,lambda,num.class = 100))
#PRand2 had a Test Statistic of 2 and an AD result of 1
print(birthday.spacings(PRand3Values,m,n,alpha,lambda,num.class = 100))
#PRand3 had a Test Statistic of 2 and an AD result of 1
print(birthday.spacings(PRand4Values,m,n,alpha,lambda,num.class = 100))
#PRand4 had a Test Statistic of 15.504 and an AD result of 0
print(birthday.spacings(PRand5Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(JSRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(RndRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(LehmerInt1Values,m,n,alpha,lambda,num.class = 100))
#LehmerInt1 had a Test Statistic of 2 and an AD result of 1
print(birthday.spacings(LehmerInt2Values,m,n,alpha,lambda,num.class = 100))
#LehmerInt2 had a Test Statistic of 2 and an AD result of 1
print(birthday.spacings(LehmerReal1Values,m,n,alpha,lambda,num.class = 100))
#LehmerReal1 had a Test Statistic of 2 and an AD result of 1
print(birthday.spacings(LehmerReal2Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(MSRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(ParkRandValues,m,n,alpha,lambda,num.class = 100))
#ParkRand had a Test Statistic of 16.813 and an AD result of 0
print(birthday.spacings(RoundaboutRandValues,m,n,alpha,lambda,num.class = 100))
#RoundaboutRand had a Test Statistic of 16.73 and an AD result of 0
print(birthday.spacings(SeaRandValues,m,n,alpha,lambda,num.class = 100))
#9b) Visualisation
BirthdayStatValue <- c(15.172,15.013,16.221,14.739,2,2,15.504,15.221,14.583,14.837,2,2,2,2,12.816,16.813,16.73,16.858)
BirthdayResultValue <- c(0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0)
BirthdayGroup <- c("C# Rand",
"C# Seeded Rand",
"C# Cryptographic Rand",
"Python Randint",
"Python Random",
"Python Seeded Random",
"Numpy Randint",
"Numpy Seeded Randint",
"JavaScript Rand",
"Rand.Org Data",
"Lehmer Int 1",
"Lehmer Int 2",
"Lehmer Real 1",
"Lehmer Real 2",
"Middle Square Method",
"Park White Noise",
"Roundabout White Noise",
"Sea White Noise")
Birthday_DF <- data.frame(BirthdayStatValue, BirthdayResultValue, BirthdayGroup)
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup, levels = c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
#10) Visualisation of P-Values
RandDataPValues <- c()
RandDataPValues <- append(RandDataPValues, SerialPValue)
RandDataPValues <- append(RandDataPValues, GapPValue)
RandDataPValues <- append(RandDataPValues, RunsPValue)
RandDataPValues <- append(RandDataPValues, SerialTPValue)
RandDataPGroups <- c()
RandDataPGroups <- append(RandDataPGroups, SerialPGroup)
RandDataPGroups <- append(RandDataPGroups, GapPGroup)
RandDataPGroups <- append(RandDataPGroups, RunsPGroup)
RandDataPGroups <- append(RandDataPGroups, SerialTGroup)
RandDataPTests <- c("Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test",
"Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test",
"Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test",
"Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test",
"Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test", "Serial Correlation Test")
RandDataP_DF <- data.frame(RandDataPValues, RandDataPGroups, RandDataPTests)
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, fill = factor(RandDataPGroups,levels = c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"), ordered = TRUE))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Statistical Tests Performed", y = "P-Values", title = "A Barchart Showing all collected P-Values of the Rand Data Sources")
ExpectedFreq <- c(83, 83, 83, 83, 83, 83)
DiceFreq <- c(CDice1Freq,CDice2Freq, PDice1Freq, PDice2Freq, PDice3Freq, JSDiceFreq, RndDiceFreq, RealDiceFreq, ExpectedFreq)
print(DiceFreq)
DiceGroup <- c("C1","C1","C1","C1","C1","C1","C2","C2","C2","C2","C2","C2","P1","P1","P1","P1","P1","P1","P2","P2","P2","P2","P2","P2",
"P3","P3","P3","P3","P3","P3","JS","JS","JS","JS","JS","JS","Rnd","Rnd","Rnd","Rnd","Rnd","Rnd","Real","Real","Real","Real","Real","Real",
"Expected","Expected","Expected","Expected","Expected","Expected")
DiceOutcomes <- c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)
Dice_DF <- data.frame(DiceOutcomes, DiceGroup, DiceFreq)
DiceOutcomes <- c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)
DiceOutcomes <- c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)
DiceOutcomes <- c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)
DiceOutcomes <- c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)
Dice_DF <- data.frame(DiceOutcomes, DiceGroup, DiceFreq)
print(Dice_DF)
DiceGroup_DF <- Dice_DF %>% group_by(DiceGroup)
print(DiceGroup_DF)
#Lined Scatterplot of Dice data
ggplot(DiceGroup_DF, aes(x = DiceOutcomes, y = DiceFreq, colour = DiceGroup)) +
geom_point(size = 3) + geom_smooth(linetype="dashed") + labs(x = "Possible Dice Outcomes (1-6)", y = "Frequency", color = "Data Sources", title = "A Scatterplot Showing the Frequency of Dice Outcomes")
ExpectedFreq <- c(250,250)
CoinFreq <- c(CCoin1Freq, CCoin2Freq, PCoin1Freq, PCoin2Freq, PCoin3Freq, JSCoinFreq, RndCoinFreq, RealCoinFreq, ExpectedFreq)
print(CoinFreq)
CoinOutcomes <- c(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1)
CoinGroup <- c("C1","C1","C2","C2","P1","P1","P2","P2","P3",
"P3","JS","JS","Rnd","Rnd","Real","Real","Expected","Expected")
Coin_DF <- data.frame(CoinOutcomes, CoinGroup, CoinFreq)
print(Coin_DF)
CoinGroup_DF <- Coin_DF %>% group_by(CoinGroup)
#Bar Graph of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinGroup, y = CoinFreq, fill = factor(CoinOutcomes))) +
geom_bar(stat = "identity", width=0.5, position="dodge") +
scale_fill_discrete(name="Possible Coin Outcomes",breaks=c(0, 1),labels=c("Heads", "Tails")) + labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Coin Outcomes")
#4h) Visualisation
#Some p-values presented were considered to be anomalous either due to the nature or faults of the generators in question
#Therefore when visualising the data these generators were removed to allow for a more balanced overview
SerialPValue <- c(0.76,0.69,0.14,0.27,0.03,0.43,0.7,0.17,0.33,0.28,0.95, 0.5)
SerialPGroup <- c("C# Rand","C# Seeded Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Real 1","Lehmer Real 2","Expected")
SerialP_DF <- data.frame(SerialPValue, SerialPGroup)
SerialPGroup_DF <- SerialP_DF %>% group_by(SerialPGroup)
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Serial Test Data") + geom_text(aes(label = SerialPValue, vjust = 1.2))
#5h) Visualisation
GapPValue <- c(0.3,0.12,0.00023,0.8,0.56,0.73,0.6,0.22,0.67,0.042,0.0012,0.036,0.85, 0.5)
GapPGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Real 1","Lehmer Real 2","Expected")
GapP_DF <- data.frame(GapPValue, GapPGroup)
GapPGroup_DF <- GapP_DF %>% group_by(GapPGroup)
ggplot(GapPGroup_DF, aes(x = reorder(GapPGroup, -GapPValue), y = GapPValue, fill = GapPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Gap Test Data") + geom_text(aes(label = GapPValue, vjust = 1.2))
#7b) Visualisation
RunsPValue <- c(0.08693, 0.2243, 0.3229, 0.713, 0.6544, 0.5308, 0.9997, 0.3706, 0.3018, 0.05256, 0.7882, 0.04887, 0.7202, 0.6544, 0.05)
RunsPGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2","Expected")
RunsP_DF <- data.frame(RunsPValue, RunsPGroup)
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue, vjust = -0.5))
#8b) Visualisation
SerialTValue <- c(1.6,-0.84,-0.96,0.68,-0.082,-0.43,1.2,1.8,-0.7,-2.9,0.6,-0.039,-0.14,0.29,2.2,0)
SerialTPValue <- c(0.11,0.4,0.34,0.5,0.93,0.67,0.24,0.079,0.49,0.0039,0.55,0.97,0.89,0.78,0.025,0.5)
SerialTGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2", "Middle Square Method","Expected")
SerialT_DF <- data.frame(SerialTValue, SerialTPValue, SerialTGroup)
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialTPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) +geom_text(hjust=0.4, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing") + theme(legend.position = "none")
