TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
View(TfIdf)
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
load("C:/Users/Alex/Desktop/Business Analytics & Data Science/MATH513/Part 2/Package/BidenSpeeches/data/combined_speech_data.rda")
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
TfIdf(data)
TfIdf(data)
TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
install.packages("RDieHarder")
install.packages("RDieHarder")
library(RDieHarder)
library(RDieHarder)
library(RDieHarder)
library(rjson)
#The working directory is set to allow access to stored JSON files
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
DiceSim1Values <- fromJSON(file = "C#DiceSim1.json")
DiceSim2Values <- fromJSON(file = "C#DiceSim2.json")
print(DiceSim1Values)
print(DiceSim2Values)
#Retrieving the Dice Sim data from the C# output
CDiceSim1Values <- fromJSON(file = "C#DiceSim1.json")
CDiceSim2Values <- fromJSON(file = "C#DiceSim2.json")
#Retrieving the Dice Sim data from the Python output
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PDiceSim1Values <- fromJSON(file = "PythonDiceOutput1.json")
PDiceSim2Values <- fromJSON(file = "PythonDiceOutput2.json")
PDiceSim3Values <- fromJSON(file = "PythonDiceOutput3.json")
print(PDiceSim1Values)
print(PDiceSim2Values)
print(PDiceSim3Values)
#Retrieving the Dice Sim data from the JavaScript output
setwd("D:/Github/PROJ518/Javascript_Rand/Javascript_Rand_Output")
JSDiceSim1Values <- fromJSON(file = "JavaScriptDiceSim.json")
print(JSDiceSim1Values)
JSDiceSim1Values <- fromJSON(file = "JavaScriptDiceSim.json")
print(JSDiceSim1Values)
#Retrieving the Real Dice Roll data
setwd("D:/Github/PROJ518/Dice_Rolls")
RealDiceValues <- fromJSON(file = "DiceRolls.json")
print(RealDiceValues)
np <- 500 * (1/6)
print(np)
#Converting Sim values to dataframes
CDice1 <- as.data.frame(CDiceSim1Values)
CDice2 <- as.data.frame(CDiceSim2Values)
PDice1 <- as.data.frame(PDiceSim1Values)
PDice2 <- as.data.frame(PDiceSim2Values)
PDice3 <- as.data.frame(PDiceSim3Values)
JSDice <- as.data.frame(JSDiceSim1Values)
RealDice <- as.data.frame(RealDiceValues)
print(CDice1)
CDice1Ouput1 <- as.data.frame(table(CDiceSim1Values))
print(CDice1Ouput1)
CDice1Ouput <- as.data.frame(table(CDiceSim1Values))
print(CDice1Ouput)
CDice2Ouput <- as.data.frame(table(CDice2))
print(CDice2Output)
CDice2Output <- as.data.frame(table(CDice2))
print(CDice2Output)
#Counting the frequency of each face
CDice1 <- as.data.frame(table(CDiceSim1Values))
print(CDice1Ouput)
PDice1 <- as.data.frame(table(PDiceSim1Values))
print(PDice1)
PDice2 <- as.data.frame(table(PDiceSim2Values))
print(PDice2)
PDice3 <- as.data.frame(table(PDiceSim3Values))
print(PDice3)
JSDice <- as.data.frame(table(JSDiceSim1Values))
print(JSDice)
RealDice <- as.data.frame(table(RealDiceValues))
print(RealDice)
