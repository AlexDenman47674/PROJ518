TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
View(TfIdf)
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
load("C:/Users/Alex/Desktop/Business Analytics & Data Science/MATH513/Part 2/Package/BidenSpeeches/data/combined_speech_data.rda")
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
TfIdf(data)
TfIdf(data)
TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
install.packages("RDieHarder")
install.packages("RDieHarder")
library(RDieHarder)
library(RDieHarder)
library(RDieHarder)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
#The working directory is set to allow access to stored JSON files
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
#Retrieving the Dice Sim data from the C# output
CDiceSim1Values <- fromJSON(file = "C#DiceSim1.json")
CDiceSim2Values <- fromJSON(file = "C#DiceSim2.json")
print(CDiceSim1Values)
print(CDiceSim2Values)
#Retrieving the Dice Sim data from the Python output
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PDiceSim1Values <- fromJSON(file = "PythonDiceOutput1.json")
PDiceSim2Values <- fromJSON(file = "PythonDiceOutput2.json")
PDiceSim3Values <- fromJSON(file = "PythonDiceOutput3.json")
print(PDiceSim1Values)
print(PDiceSim2Values)
print(PDiceSim3Values)
#Retrieving the Dice Sim data from the JavaScript output
setwd("D:/Github/PROJ518/Javascript_Rand/Javascript_Rand_Output")
JSDiceSim1Values <- fromJSON(file = "JavaScriptDiceSim.json")
print(JSDiceSim1Values)
#Retrieving the Dice Sim data from Random Dot Org
setwd("D:/Github/PROJ518/RandDotOrg/RandDotOrgOutput")
RndDiceSim1Values <- fromJSON(file = "RandDotOrgDiceSim.json")
print(RndDiceSim1Values)
#Retrieving the Real Dice Roll data
setwd("D:/Github/PROJ518/Dice_Rolls")
RealDiceValues <- fromJSON(file = "DiceRolls.json")
print(RealDiceValues)
np <- 500 * (1/6)
print(np)
#Counting the frequency of each face
CDice1 <- as.data.frame(table(CDiceSim1Values))
print(CDice1)
CDice2 <- as.data.frame(table(CDiceSim2Values))
print(CDice2)
PDice1 <- as.data.frame(table(PDiceSim1Values))
print(PDice1)
PDice2 <- as.data.frame(table(PDiceSim2Values))
print(PDice2)
PDice3 <- as.data.frame(table(PDiceSim3Values))
print(PDice3)
JSDice <- as.data.frame(table(JSDiceSim1Values))
print(JSDice)
RndDice <- as.data.frame(table(RndDiceSim1Values))
print(RndDice)
RealDice <- as.data.frame(table(RealDiceValues))
print(RealDice)
V_CDice1 <- ((CDice1[1, 2] - np)^2 / np) + ((CDice1[2, 2] - np)^2 / np) + ((CDice1[3, 2] - np)^2 / np) + ((CDice1[4, 2] - np)^2 / np) + ((CDice1[5, 2] - np)^2 / np) + ((CDice1[6, 2] - np)^2 / np)
print(V_CDice1)
V_CDice2 <- ((CDice2[1, 2] - np)^2 / np) + ((CDice2[2, 2] - np)^2 / np) + ((CDice2[3, 2] - np)^2 / np) + ((CDice2[4, 2] - np)^2 / np) + ((CDice2[5, 2] - np)^2 / np) + ((CDice2[6, 2] - np)^2 / np)
print(V_CDice2)
V_PDice1 <- ((PDice1[1, 2] - np)^2 / np) + ((PDice1[2, 2] - np)^2 / np) + ((PDice1[3, 2] - np)^2 / np) + ((PDice1[4, 2] - np)^2 / np) + ((PDice1[5, 2] - np)^2 / np) + ((PDice1[6, 2] - np)^2 / np)
print(V_PDice1)
V_PDice2 <- ((PDice2[1, 2] - np)^2 / np) + ((PDice2[2, 2] - np)^2 / np) + ((PDice2[3, 2] - np)^2 / np) + ((PDice2[4, 2] - np)^2 / np) + ((PDice2[5, 2] - np)^2 / np) + ((PDice2[6, 2] - np)^2 / np)
print(V_PDice2)
V_PDice3 <- ((PDice3[1, 2] - np)^2 / np) + ((PDice3[2, 2] - np)^2 / np) + ((PDice3[3, 2] - np)^2 / np) + ((PDice3[4, 2] - np)^2 / np) + ((PDice3[5, 2] - np)^2 / np) + ((PDice3[6, 2] - np)^2 / np)
print(V_PDice3)
V_JSDice <- ((JSDice[1, 2] - np)^2 / np) + ((JSDice[2, 2] - np)^2 / np) + ((JSDice[3, 2] - np)^2 / np) + ((JSDice[4, 2] - np)^2 / np) + ((JSDice[5, 2] - np)^2 / np) + ((JSDice[6, 2] - np)^2 / np)
print(V_JSDice)
V_RndDice <- ((RndDice[1, 2] - np)^2 / np) + ((RndDice[2, 2] - np)^2 / np) + ((RndDice[3, 2] - np)^2 / np) + ((RndDice[4, 2] - np)^2 / np) + ((RndDice[5, 2] - np)^2 / np) + ((RndDice[6, 2] - np)^2 / np)
print(V_RndDice)
V_RealDice <- ((RealDice[1, 2] - np)^2 / np) + ((RealDice[2, 2] - np)^2 / np) + ((RealDice[3, 2] - np)^2 / np) + ((RealDice[4, 2] - np)^2 / np) + ((RealDice[5, 2] - np)^2 / np) + ((RealDice[6, 2] - np)^2 / np)
print(V_RealDice)
#1b) Coin Flips
#Retrieving the Coin Sim data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CCoinSim1Values <- fromJSON(file = "C#CoinSim1.json")
CCoinSim2Values <- fromJSON(file = "C#CoinSim2.json")
print(CCoinSim1Values)
print(CCoinSim2Values)
#Retrieving the Coin Sim data from the Python output
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PCoinSim1Values <- fromJSON(file = "PythonCoinSim1.json")
PCoinSim2Values <- fromJSON(file = "PythonCoinSim2.json")
PCoinSim3Values <- fromJSON(file = "PythonCoinSim3.json")
print(PCoinSim1Values)
print(PCoinSim2Values)
print(PCoinSim3Values)
#Retrieving the Coin Sim data from the JavaScript output
setwd("D:/Github/PROJ518/Javascript_Rand/Javascript_Rand_Output")
JSCoinSim1Values <- fromJSON(file = "JavaScriptCoinSim.json")
print(JSCoinSim1Values)
#Retrieving the Coin Sim data from Random Dot Org
setwd("D:/Github/PROJ518/RandDotOrg/RandDotOrgOutput")
RndCoinSim1Values <- fromJSON(file = "RandDotOrgCoinSim.json")
print(RndCoinSim1Values)
#Retrieving the Real Coin Flip data
setwd("D:/Github/PROJ518/Coin_Flips")
RealCoinValues <- fromJSON(file = "Coin_Flips.json")
print(RealCoinValues)
#Performing the Chi Squared equation
#As a coin is being simulated instead of dice, the np must be adjusted to the new set of possible outcomes 0 (heads) or 1 (tails)
np <- 500 * (1/2)
print(np)
#Counting the frequency of each side
CCoin1 <- as.data.frame(table(CCoinSim1Values))
print(CCoin1)
CCoin2 <- as.data.frame(table(CCoinSim2Values))
print(CCoin2)
PCoin1 <- as.data.frame(table(PCoinSim1Values))
print(PCoin1)
PCoin2 <- as.data.frame(table(PCoinSim2Values))
print(PCoin2)
PCoin3 <- as.data.frame(table(PCoinSim3Values))
print(PCoin3)
JSCoin <- as.data.frame(table(JSCoinSim1Values))
print(JSCoin)
RndCoin <- as.data.frame(table(RndCoinSim1Values))
print(RndCoin)
RealCoin <- as.data.frame(table(RealCoinValues))
print(RealCoin)
V_CCoin1 <- ((CCoin1[1, 2] - np)^2 / np) + ((CCoin1[2, 2] - np)^2 / np)
print(V_CCoin1)
V_CCoin2 <- ((CCoin2[1, 2] - np)^2 / np) + ((CCoin2[2, 2] - np)^2 / np)
print(V_CCoin2)
V_PCoin1 <- ((PCoin1[1, 2] - np)^2 / np) + ((PCoin1[2, 2] - np)^2 / np)
print(V_PCoin1)
V_PCoin2 <- ((PCoin2[1, 2] - np)^2 / np) + ((PCoin2[2, 2] - np)^2 / np)
print(V_PCoin2)
V_PCoin3 <- ((PCoin3[1, 2] - np)^2 / np) + ((PCoin3[2, 2] - np)^2 / np)
print(V_PCoin3)
V_JSCoin <- ((JSCoin[1, 2] - np)^2 / np) + ((JSCoin[2, 2] - np)^2 / np)
print(V_JSCoin)
V_RndCoin <- ((RndCoin[1, 2] - np)^2 / np) + ((RndCoin[2, 2] - np)^2 / np)
print(V_RndCoin)
V_RealCoin <- ((RealCoin[1, 2] - np)^2 / np) + ((RealCoin[2, 2] - np)^2 / np)
print(V_RealCoin)
#2a) Visualisation of Dice Data
CDice1Freq <- CDice1[,2]
CDice2Freq <- CDice2[,2]
PDice1Freq <- PDice1[,2]
PDice2Freq <- PDice2[,2]
PDice3Freq <- PDice3[,2]
JSDiceFreq <- JSDice[,2]
RndDiceFreq <- RndDice[,2]
RealDiceFreq <- RealDice[,2]
DiceFreq <- c(CDice1Freq,CDice2Freq, PDice1Freq, PDice2Freq, PDice3Freq, JSDiceFreq, RndDiceFreq, RealDiceFreq)
print(DiceFreq)
DiceOutcomes <- c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)
DiceGroup <- c("C1","C1","C1","C1","C1","C1","C2","C2","C2","C2","C2","C2","P1","P1","P1","P1","P1","P1","P2","P2","P2","P2","P2","P2",
"P3","P3","P3","P3","P3","P3","JS","JS","JS","JS","JS","JS","Rnd","Rnd","Rnd","Rnd","Rnd","Rnd","Real","Real","Real","Real","Real","Real")
Dice_DF <- data.frame(DiceOutcomes, DiceGroup, DiceFreq)
print(Dice_DF)
DiceGroup_DF <- Dice_DF %>% group_by(DiceGroup)
print(DiceGroup_DF)
#Lined Scatterplot of Dice data
ggplot(DiceGroup_DF, aes(x = DiceOutcomes, y = DiceFreq, colour = DiceGroup)) +
geom_point(size = 3) + geom_smooth(linetype="dashed")
#2b) Visualisation of Coin Data
CCoin1Freq <- CCoin1[,2]
CCoin2Freq <- CCoin2[,2]
PCoin1Freq <- PCoin1[,2]
PCoin2Freq <- PCoin2[,2]
PCoin3Freq <- PCoin3[,2]
JSCoinFreq <- JSCoin[,2]
RndCoinFreq <- RndCoin[,2]
RealCoinFreq <- RealCoin[,2]
CoinFreq <- c(CCoin1Freq, CCoin2Freq, PCoin1Freq, PCoin2Freq, PCoin3Freq, JSCoinFreq, RndCoinFreq, RealCoinFreq)
print(CoinFreq)
CoinOutcomes <- c(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1)
CoinGroup <- c("C1","C1","C2","C2","P1","P1","P2","P2","P3","P3","JS","JS","Rnd","Rnd","Real","Real")
Coin_DF <- data.frame(CoinOutcomes, CoinGroup, CoinFreq)
print(Coin_DF)
CoinGroup_DF <- Coin_DF %>% group_by(CoinGroup)
print(CoinGroup_DF)
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinOutcomes, y = CoinFreq, colour = CoinGroup)) +
geom_histogram()
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinOutcomes, colour = CoinGroup)) +
geom_histogram()
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinOutcomes, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinGroup, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinGroup, y = CoinFreq)) +
geom_bar(stat = "identity", colour = CoinGroup)
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinGroup, y = CoinFreq)) +
geom_bar(colour = CoinGroup)
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinGroup, y = CoinFreq)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinGroup, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinFreq, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinFreq, y = CoinOutcomes, colour = CoinGroup)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinFreq, colour = CoinGroup)) +
geom_bar()
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinFreq, y = CoinOutcomes, colour = CoinGroup)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinOutcomes, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
CoinGroup_DF <- Coin_DF %>% group_by(CoinGroup, CoinOutcomes)
print(CoinGroup_DF)
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinOutcomes, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
CoinGroup_DF <- Coin_DF %>% group_by(CoinOutcomes)
print(CoinGroup_DF)
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinOutcomes, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
CoinGroup_DF <- Coin_DF %>% group_by(CoinOutcomes, CoinGroup)
print(CoinGroup_DF)
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinOutcomes, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
CoinGroup_DF <- Coin_DF %>% group_by(CoinGroup)
print(CoinGroup_DF)
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinOutcomes, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinGroup, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
barplot(CoinGroup_DF)
CoinOutcomes <- c(0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1)
CoinGroup <- c("C1(Heads)","C1","C2","C2","P1","P1","P2","P2","P3","P3","JS","JS","Rnd","Rnd","Real","Real")
Coin_DF <- data.frame(CoinOutcomes, CoinGroup, CoinFreq)
print(Coin_DF)
CoinGroup_DF <- Coin_DF %>% group_by(CoinGroup)
print(CoinGroup_DF)
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinGroup, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
CoinGroup <- c("C1(Heads)","C1(Tails)","C2(Heads)","C2(Tails)","P1(Heads)","P1(Tails)","P2(Heads)","P2(Tails)","P3(Heads)",
"P3(Tails)","JS(Heads)","JS(Tails)","Rnd(Heads)","Rnd(Tails)","Real(Heads)","Real(Tails)")
Coin_DF <- data.frame(CoinOutcomes, CoinGroup, CoinFreq)
print(Coin_DF)
CoinGroup_DF <- Coin_DF %>% group_by(CoinGroup)
print(CoinGroup_DF)
#Histogram of Coin Data
ggplot(CoinGroup_DF, aes(x = CoinGroup, y = CoinFreq, colour = CoinGroup)) +
geom_bar(stat = "identity")
#Histogram of Coin Data
ggplot(CoinGroup_DF) +
geom_bar(stat = "identity", aes(x = CoinGroup, y = CoinFreq, colour = CoinGroup))
#Histogram of Coin Data
ggplot(CoinGroup_DF) +
geom_bar(stat = "identity", aes(x = CoinGroup, y = CoinFreq, colour = CoinGroup)) +
theme(legend.position="none")
#Histogram of Coin Data
ggplot(CoinGroup_DF) +
geom_bar(stat = "identity", aes(x = CoinGroup, y = CoinFreq, fill = CoinGroup)) +
theme(legend.position="none")
#Histogram of Coin Data
ggplot(CoinGroup_DF) +
geom_bar(stat = "identity", aes(x = CoinGroup, y = CoinFreq, fill = CoinOutcomes)) +
theme(legend.position="none")
#Histogram of Coin Data
ggplot(CoinGroup_DF) +
geom_bar(stat = "identity", aes(x = CoinGroup, y = CoinFreq, fill = CoinOutcomes), width=0.2) +
theme(legend.position="none")
#Histogram of Coin Data
ggplot(CoinGroup_DF) +
geom_bar(stat = "identity", aes(x = CoinGroup, y = CoinFreq, fill = CoinOutcomes), width=0.5) +
theme(legend.position="none")
#Histogram of Coin Data
ggplot(CoinGroup_DF) +
geom_bar(stat = "identity", aes(x = CoinGroup, y = CoinFreq, fill = CoinGroup), width=0.5) +
theme(legend.position="none")
CoinOutcomes
#Histogram of Coin Data
ggplot(CoinGroup_DF) +
geom_bar(stat = "identity", aes(x = CoinGroup, y = CoinFreq, fill = CoinOutcomes), width=0.5) +
theme(legend.position="none")
