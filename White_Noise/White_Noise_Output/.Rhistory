group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
View(TfIdf)
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
load("C:/Users/Alex/Desktop/Business Analytics & Data Science/MATH513/Part 2/Package/BidenSpeeches/data/combined_speech_data.rda")
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
TfIdf(data)
TfIdf(data)
TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
install.packages("RDieHarder")
install.packages("RDieHarder")
library(RDieHarder)
library(RDieHarder)
library(RDieHarder)
dh <- dieharder; summary(dh); plot(dh)
dh <- dieharder %>% summary(dh)%>% plot(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
dh <- dieharder %>% summary(dh)%>% plot(dh)
dh <- dieharder
print(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
library(dgof)
library(randtoolbox)
library(randtests)
library(EnvStats)
library(CryptRndTest)
#Retrieving the C# rand data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CRand1Values <- fromJSON(file = "RandVer1.json")
CRand2Values <- fromJSON(file = "RandVer2.json")
CRand3Values <- fromJSON(file = "RandVer3.json")
#1 sample tests
ks.test(CRand1Values/100, "pnorm")
ks.test(CRand2Values/100, "pnorm")
ks.test(CRand3Values/100, "pnorm")
#3b) Kolmogorov-Smirnov Test of Lehmer rand data
setwd("D:/Github/PROJ518/Lehmer_Generator/Lehmer_Generator_Output")
LehmerInt1Values <- fromJSON(file = "IntegerVer1Output.json")
LehmerInt2Values <- fromJSON(file = "IntegerVer2Output.json")
LehmerReal1Values <- fromJSON(file = "RealVer1Output.json")
LehmerReal2Values <- fromJSON(file = "RealVer2Output.json")
#1 sample tests
ks.test(LehmerInt1Values, "pnorm")
#3c) Kolmogorov-Smirnov Test of Python rand data
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PRand1Values <- fromJSON(file = "PythonOutput1.json")
PRand2Values <- fromJSON(file = "PythonOutput2.json")
PRand3Values <- fromJSON(file = "PythonOutput3.json")
PRand4Values <- fromJSON(file = "PythonOutput4.json")
PRand5Values <- fromJSON(file = "PythonOutput5.json")
#3d) Kolmogorov-Smirnov Test of Javascript rand data
setwd("D:/Github/PROJ518/Javascript_Rand/Javascript_Rand_Output")
JSRandValues <- fromJSON(file = "JavaScriptOutput.json")
#3e) Kolmogorov-Smirnov Test of Middle Square Method data
setwd("D:/Github/PROJ518/Middle_Square_Method/Middle_Square_Output")
MSRandValues <- fromJSON(file = "MiddleSquare.json")
#3f) Kolmogorov-Smirnov Test of Rand.Org Data
setwd("D:/Github/PROJ518/RandDotOrg/RandDotOrgOutput")
RndRandValues <- fromJSON(file = "RandDotOrgOutput1.json")
#3g) Kolmogorov-Smirnov Test of White Noise Data
setwd("D:/Github/PROJ518/White_Noise/White_Noise_Output")
ParkRandValues <-fromJSON(file = "ParkDataCut.json")
RoundaboutRandValues <-fromJSON(file = "RoundaboutDataCut.json")
SeaRandValues <-fromJSON(file = "SeaDataCut.json")
#4h) Visualisation
#Some p-values presented were considered to be anomalous either due to the nature or faults of the generators in question
#Therefore when visualising the data these generators were removed to allow for a more balanced overview
SerialPValue <- c(0.76,0.69,0.14,0.27,0.03,0.43,0.7,0.17,0.33,0.28,0.95)
SerialPGroup <- c("C# Rand","C# Seeded Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Real 1","Lehmer Real 2")
alue <- c(0.3,0.12,0.00023,0.8,0.56,0.73,0.6,0.22,0.67,0.042,0.0012,0.036,0.85)
GapPG
#5h) Visualisation
GapPValue <- c(0.3,0.12,0.00023,0.8,0.56,0.73,0.6,0.22,0.67,0.042,0.0012,0.036,0.85)
GapPGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Real 1","Lehmer Real 2")
#7b) Visualisation
RunsPValue <- c(0.08693, 0.2243, 0.3229, 0.713, 0.6544, 0.5308, 0.9997, 0.3706, 0.3018, 0.05256, 0.7882, 0.04887, 0.7202, 0.6544)
RunsPGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2")
SerialPValue <- c(0.11,0.4,0.34,0.5,0.93,0.67,0.24,0.079,0.49,0.0039,0.55,0.97,0.89,0.78,0.025)
SerialTGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2", "Middle Square Method")
#4h) Visualisation
#Some p-values presented were considered to be anomalous either due to the nature or faults of the generators in question
#Therefore when visualising the data these generators were removed to allow for a more balanced overview
SerialPValue <- c(0.76,0.69,0.14,0.27,0.03,0.43,0.7,0.17,0.33,0.28,0.95)
SerialPGroup <- c("C# Rand","C# Seeded Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Real 1","Lehmer Real 2")
SerialTPValue <- c(0.11,0.4,0.34,0.5,0.93,0.67,0.24,0.079,0.49,0.0039,0.55,0.97,0.89,0.78,0.025)
SerialTGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2", "Middle Square Method")
#10) Visualisation of P-Values
RandDataPValues <- c()
RandDataPValues <- append(RandDataPValues, SerialPValue)
RandDataPValues <- append(RandDataPValues, GapPValue)
RandDataPValues <- append(RandDataPValues, RunsPValue)
RandDataPValues <- append(RandDataPValues, SerialTPValue)
RandDataPGroups <- c()
RandDataPGroups <- append(RandDataPGroups, SerialPGroup)
RandDataPGroups <- append(RandDataPGroups, GapPGroup)
RandDataPGroups <- append(RandDataPGroups, RunsPGroup)
RandDataPGroups <- append(RandDataPGroups, SerialTGroup)
RandDataPTests <- c()
RandDataPTests <- append("Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test",
"Serial Test","Serial Test","Serial Test","Serial Test")
RandDataPTests <- c("Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test",
"Serial Test","Serial Test","Serial Test","Serial Test")
RandDataPTests <- c("Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test",
"Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test")
RandDataPTests <- c("Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test",
"Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test",
"Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test",
"Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test",
"Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test", "Serial Correlation Test")
RandDataP_DF <- data.frame(RandDataPValues, RandDataPGroups, RandDataPTests)
View(RandDataP_DF)
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, colour = RandDataPGroups)) +
geom_point(size = 3) + geom_smooth(linetype="dashed") +
labs(x = "Randomness Tests", y = "P-Value", color = "Data Sources", title = "A Scatterplot Showing the P-Values of Rand Data Sources")
View(RandDataP_DF)
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPGroups, colour = RandDataPGroups)) +
geom_point(size = 3) + geom_smooth(linetype="dashed") +
labs(x = "Randomness Tests", y = "P-Value", color = "Data Sources", title = "A Scatterplot Showing the P-Values of Rand Data Sources")
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, colour = RandDataPGroups)) +
geom_point(size = 3) + geom_smooth(linetype="dashed") +
labs(x = "Randomness Tests", y = "P-Value", color = "Data Sources", title = "A Scatterplot Showing the P-Values of Rand Data Sources")
RandDataPTests <- c(1,1,1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,
4,4,4,4,4,4,4,
4,4,4,4,4,4,4, 4)
RandDataP_DF <- data.frame(RandDataPValues, RandDataPGroups, RandDataPTests)
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, colour = RandDataPGroups)) +
geom_point(size = 3) + geom_smooth(linetype="dashed") +
labs(x = "Randomness Tests", y = "P-Value", color = "Data Sources", title = "A Scatterplot Showing the P-Values of Rand Data Sources")
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, fill = factor(RandDataPGroups))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
RandDataPTests <- c("Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test","Serial Test",
"Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test","Gap Test",
"Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test","Runs Test",
"Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test",
"Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test","Serial Correlation Test", "Serial Correlation Test")
RandDataP_DF <- data.frame(RandDataPValues, RandDataPGroups, RandDataPTests)
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, fill = factor(RandDataPGroups))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, fill = factor(RandDataPGroups))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Statistical Tests Performed", y = "P-Values", title = "A Barchart Showing all collected P-Values of the Rand Data Sources")
ggplot(RandDataP_DF, aes(x = reorder(RandDataPTests, -RandDataPGroups), y = RandDataPValues, fill = factor(RandDataPGroups))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Statistical Tests Performed", y = "P-Values", title = "A Barchart Showing all collected P-Values of the Rand Data Sources")
ggplot(RandDataP_DF, aes(x = reorder(RandDataPTests), y = RandDataPValues, fill = factor(RandDataPGroups))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Statistical Tests Performed", y = "P-Values", title = "A Barchart Showing all collected P-Values of the Rand Data Sources")
ggplot(RandDataP_DF, aes(x = reorder(RandDataPTests, -RandDataPTests), y = RandDataPValues, fill = factor(RandDataPGroups))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Statistical Tests Performed", y = "P-Values", title = "A Barchart Showing all collected P-Values of the Rand Data Sources")
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, fill = factor(RandDataPGroups))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Statistical Tests Performed", y = "P-Values", title = "A Barchart Showing all collected P-Values of the Rand Data Sources")
RandDataPGroup_DF <- RandDataP_DF %>% group_by(RandDataPTests)
View(RandDataPGroup_DF)
View(RandDataP_DF)
RandDataPGroup_DF <- RandDataP_DF %>% group_by(RandDataPGroups)
View(RandDataPGroup_DF)
View(RandDataP_DF)
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, fill = factor(RandDataPGroups,levels = c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"), ordered = TRUE))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Statistical Tests Performed", y = "P-Values", title = "A Barchart Showing all collected P-Values of the Rand Data Sources")
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
#9b) Visualisation
BirthdayStatValue <- c(15.172,15.013,16.221,14.739,2,2,15.504,15.221,14.583,14.837,2,2,2,2,12.816,16.813,16.73,16.858)
BirthdayResultValue <- c(0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0)
BirthdayGroup <- c("C# Rand",
"C# Seeded Rand",
"C# Cryptographic Rand",
"Python Randint",
"Python Random",
"Python Seeded Random",
"Numpy Randint",
"Numpy Seeded Randint",
"JavaScript Rand",
"Rand.Org Data",
"Lehmer Int 1",
"Lehmer Int 2",
"Lehmer Real 1",
"Lehmer Real 2",
"Middle Square Method",
"Park White Noise",
"Roundabout White Noise",
"Sea White Noise")
Birthday_DF <- data.frame(BirthdayStatValue, BirthdayResultValue, BirthdayGroup)
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup, levels = c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, fill = factor(RandDataPGroups,levels = c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"), ordered = TRUE))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Statistical Tests Performed", y = "P-Values", title = "A Barchart Showing all collected P-Values of the Rand Data Sources")
#8b) Visualisation
SerialTValue <- c(1.6,-0.84,-0.96,0.68,-0.082,-0.43,1.2,1.8,-0.7,-2.9,0.6,-0.039,-0.14,0.29,2.2)
SerialTPValue <- c(0.11,0.4,0.34,0.5,0.93,0.67,0.24,0.079,0.49,0.0039,0.55,0.97,0.89,0.78,0.025)
SerialTGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2", "Middle Square Method")
SerialT_DF <- data.frame(SerialTValue, SerialTPValue, SerialTGroup)
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialTPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) +geom_text(hjust=0.4, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing") + theme(legend.position = "none")
#7b) Visualisation
RunsPValue <- c(0.08693, 0.2243, 0.3229, 0.713, 0.6544, 0.5308, 0.9997, 0.3706, 0.3018, 0.05256, 0.7882, 0.04887, 0.7202, 0.6544)
RunsPGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2")
RunsP_DF <- data.frame(RunsPValue, RunsPGroup)
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue, vjust = -0.5))
#Visualisation
TexasDealValues <- c(0,4,1,1,0,3,2,1,0,0,0,4,2,1,0,2,2,1,0,1,2,4,0,0,0,4,1,1,0,0,2,3,1,0,0,0,1,0,0,5)
TexasDealOutcomes <- c("High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush")
TexasDealSources <- c("C# Random","C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint", "Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
TexasDeal_DF <- data.frame(TexasDealValues, TexasDealOutcomes, TexasDealSources)
ggplot(TexasDeal_DF, aes(x = TexasDealSources, y = TexasDealValues, fill = factor(TexasDealOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind","Flush"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind","Flush")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after alternative non-sequential distribution")
ggplot(TexasDeal_DF, aes(x = TexasDealSources, y = TexasDealValues, fill = factor(TexasDealOutcomes, levels = c("High Card","Pair", "Two Pair", "Three of a Kind","Flush")))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind","Flush"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind","Flush")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after alternative non-sequential distribution")
#Visualisation
CardDealValues <- c(2,4,0,0,3,2,0,1,3,3,0,0,5,1,0,0,2,4,0,0,2,3,1,0,2,3,1,0,4,2,0,0)
CardDealOutcomes <- c("High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind",
"High Card","Pair","Two Pair","Three of a Kind")
CardDealSources <- c("C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
PokerDeal_DF <- data.frame(CardDealValues, CardDealOutcomes, CardDealSources)
ggplot(PokerDeal_DF, aes(x = CardDealSources, y = CardDealValues, fill = factor(CardDealOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after non-sequential distribution")
ggplot(PokerDeal_DF, aes(x = CardDealSources, y = CardDealValues, fill = factor(CardDealOutcomes, levels = c("High Card","Pair", "Two Pair", "Three of a Kind")))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after non-sequential distribution")
#6c) Visualisation
CardOutcomes <-c(1,6,2,1,0,0,
2,4,4,0,0,0,
3,2,2,2,1,0,
0,3,5,1,1,0,
1,5,0,1,2,0,
1,0,2,2,4,1,
2,2,3,2,1,0,
0,2,5,1,1,1)
HandOutcomes <-c("Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind",
"Pair","Two Pair","Three of a Kind","Full House","Four of a Kind","Five of a Kind")
CardSources <-c("C# Random","C# Random","C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint","Python Randint","Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
PokerTest_DF <- data.frame(CardOutcomes, HandOutcomes, CardSources)
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
ggplot(PokerTest_DF, aes(x = CardSources, y = CardOutcomes, fill = factor(HandOutcomes, levels = c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind")))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("Pair", "Two Pair", "Three of a Kind", "Full House", "Four of a Kind", "Five of a Kind"),
labels=c("Pair", "Two Pair","Three of a Kind","Full House", "Four of a Kind","Five of a Kind")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes")
#In string form, the values given aren't suitable for visualisation
#First the data can be sorted into the four suits (spades, hearts, clubs, diamonds)
CardSuitGroup <- c()
for (x in CCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in CCard2Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
for (x in PCard1Values) {
if (grepl("of Spades", x)) {
CardSuitGroup <- append(CardSuitGroup, "Spade")
}else if (grepl("of Hearts", x)){
CardSuitGroup <- append(CardSuitGroup, "Heart")
}else if (grepl("of Clubs", x)){
CardSuitGroup <- append(CardSuitGroup, "Club")
}else if (grepl("of Diamonds", x)){
CardSuitGroup <- append(CardSuitGroup, "Diamond")
}
}
#5h) Visualisation
GapPValue <- c(0.3,0.12,0.00023,0.8,0.56,0.73,0.6,0.22,0.67,0.042,0.0012,0.036,0.85)
GapPGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Real 1","Lehmer Real 2")
GapP_DF <- data.frame(GapPValue, GapPGroup)
GapPGroup_DF <- GapP_DF %>% group_by(GapPGroup)
ggplot(GapPGroup_DF, aes(x = reorder(GapPGroup, -GapPValue), y = GapPValue, fill = GapPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Gap Test Data") + geom_text(aes(label = GapPValue, vjust = 1.2))
ggplot(RandDataP_DF, aes(x = RandDataPTests, y = RandDataPValues, fill = factor(RandDataPGroups,levels = c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"), ordered = TRUE))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Statistical Tests Performed", y = "P-Values", title = "A Barchart Showing all collected P-Values of the Rand Data Sources")
