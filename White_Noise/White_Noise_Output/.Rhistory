TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
View(TfIdf)
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
load("C:/Users/Alex/Desktop/Business Analytics & Data Science/MATH513/Part 2/Package/BidenSpeeches/data/combined_speech_data.rda")
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
TfIdf(data)
TfIdf(data)
TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
install.packages("RDieHarder")
install.packages("RDieHarder")
library(RDieHarder)
library(RDieHarder)
library(RDieHarder)
dh <- dieharder; summary(dh); plot(dh)
dh <- dieharder %>% summary(dh)%>% plot(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
dh <- dieharder %>% summary(dh)%>% plot(dh)
dh <- dieharder
print(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
library(dgof)
library(randtoolbox)
library(randtests)
#3b) Kolmogorov-Smirnov Test of Lehmer rand data
setwd("D:/Github/PROJ518/Lehmer_Generator/Lehmer_Generator_Output")
LehmerInt1Values <- fromJSON(file = "IntegerVer1Output.json")
LehmerInt2Values <- fromJSON(file = "IntegerVer2Output.json")
LehmerReal1Values <- fromJSON(file = "RealVer1Output.json")
LehmerReal2Values <- fromJSON(file = "RealVer2Output.json")
#Retrieving the C# rand data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CRand1Values <- fromJSON(file = "RandVer1.json")
CRand2Values <- fromJSON(file = "RandVer2.json")
CRand3Values <- fromJSON(file = "RandVer3.json")
#3c) Kolmogorov-Smirnov Test of Python rand data
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PRand1Values <- fromJSON(file = "PythonOutput1.json")
PRand2Values <- fromJSON(file = "PythonOutput2.json")
PRand3Values <- fromJSON(file = "PythonOutput3.json")
PRand4Values <- fromJSON(file = "PythonOutput4.json")
PRand5Values <- fromJSON(file = "PythonOutput5.json")
#3d) Kolmogorov-Smirnov Test of Javascript rand data
setwd("D:/Github/PROJ518/Javascript_Rand/Javascript_Rand_Output")
JSRandValues <- fromJSON(file = "JavaScriptOutput.json")
#3e) Kolmogorov-Smirnov Test of Middle Square Method data
setwd("D:/Github/PROJ518/Middle_Square_Method/Middle_Square_Output")
MSRandValues <- fromJSON(file = "MiddleSquare.json")
#3f) Kolmogorov-Smirnov Test of Rand.Org Data
setwd("D:/Github/PROJ518/RandDotOrg/RandDotOrgOutput")
RndRandValues <- fromJSON(file = "RandDotOrgOutput1.json")
#3g) Kolmogorov-Smirnov Test of White Noise Data
setwd("D:/Github/PROJ518/White_Noise/White_Noise_Output")
ParkRandValues <-fromJSON(file = "ParkDataCut.json")
RoundaboutRandValues <-fromJSON(file = "RoundaboutDataCut.json")
SeaRandValues <-fromJSON(file = "SeaDataCut.json")
#8a) Collision Test of Rand Data
#The Collision Test measures the number of 'collisions' a  random number generator creates when generating a sequence of numbers
#These collisions occur when a piece of data falls into a 'cell' that already contains data, usually the number of cells is much higher than the amount of data
#A generator may pass the Collision Test is the number of collisions that occur are not too high or too low
print(coll.test.sparse(CRand1Values))
#8a) Collision Test of Rand Data
#The Collision Test measures the number of 'collisions' a  random number generator creates when generating a sequence of numbers
#These collisions occur when a piece of data falls into a 'cell' that already contains data, usually the number of cells is much higher than the amount of data
#A generator may pass the Collision Test is the number of collisions that occur are not too high or too low
print(coll.test(runif, 2^7, 2^10, 1, 100))
#8a) Collision Test of Rand Data
#The Collision Test measures the number of 'collisions' a  random number generator creates when generating a sequence of numbers
#These collisions occur when a piece of data falls into a 'cell' that already contains data, usually the number of cells is much higher than the amount of data
#A generator may pass the Collision Test is the number of collisions that occur are not too high or too low
print(coll.test(CRand1Values, 2^7, 2^10, 1, 100))
#8a) Collision Test of Rand Data
#The Collision Test measures the number of 'collisions' a  random number generator creates when generating a sequence of numbers
#These collisions occur when a piece of data falls into a 'cell' that already contains data, usually the number of cells is much higher than the amount of data
#A generator may pass the Collision Test is the number of collisions that occur are not too high or too low
print(coll.test(CRand1Values, 2^7, 2^10, 1, 500))
#8a)
serialCorrelationTest(x)
install.packages("EnvStats")
library(EnvStats)
#8a)
serialCorrelationTest(CRand1Values)
serialCorrelationTest(CRand2Values)
#Crand2 has a Test Statistic of -0.84 and a p-value of 0.4
serialCorrelationTest(CRand3Values)
serialCorrelationTest(PRand1Values)
#PRand1 has a Test Statistic of 0.68 and a p-value of 0.5
serialCorrelationTest(PRand2Values)
#PRand2 has a Test Statistic of -0.082 and a p-value of 0.93
serialCorrelationTest(PRand3Values)
#PRand3 has a Test Statistic of -0.43 and a p-value of 0.67
serialCorrelationTest(PRand4Values)
#PRand4 has a Test Statistic of 1.2 and a p-value of 0.24
serialCorrelationTest(PRand5Values)
serialCorrelationTest(JSRandValues)
serialCorrelationTest(RndRandValues)
serialCorrelationTest(LehmerInt1Values)
#LehmerInt1 has a Test Statistic of 0.6 and a p-value of 0.55
serialCorrelationTest(LehmerInt2Values)
#LehmerInt2 has a Test Statistic of -0.039 and a p-value of 0.97
serialCorrelationTest(LehmerReal1Values)
#LehmerReal1 has a Test Statistic of -0.14 and a p-value of 0.89
serialCorrelationTest(LehmerReal2Values)
serialCorrelationTest(MSRandValues)
serialCorrelationTest(ParkRandValues)
#ParkRand has a Test Statistic of -22 and a p-value of 0
serialCorrelationTest(RoundaboutValues)
#ParkRand has a Test Statistic of -22 and a p-value of 0
serialCorrelationTest(RoundaboutRandValues)
#RoundaboutRand has a Test Statistic of -22 and a p-value of 0
serialCorrelationTest(SeaRandValues)
#8b) Visualisation
SerialTValue <- c(1.6,-0.84,-0.96,0.68,-0.082,-0.43,1.2,1.8,-0.7,-2.9,0.6,-0.039,-0.14,0.29,2.2)
SerialPValue <- c(0.11,0.4,0.34,0.5,0.93,0.67,0.24,0.079,0.49,0.0039,0.55,0.97,0.89,0.78,0.025)
SerialTGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2", "Middle Square Method")
SerialT_DF <- data.frame(SerialTValue, SerialPValue, SerialTGroup)
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup)) +
geom_point(size = 3) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0, vjust=0) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0, vjust=0) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=1, vjust=0) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=-1, vjust=0) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=-0.3, vjust=0) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=-0.1, vjust=0) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0, vjust=0) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0, vjust=0.3) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0, vjust=1) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0, vjust=-1) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=-0.3, vjust=-1) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.3, vjust=-1) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.3, vjust=1) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.3, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.5, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.3, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.4, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.4, vjust=-1.3) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.4, vjust=-1) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.4, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
color = "Data Sources", title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.4, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing")
ggplot(SerialT_DF, aes(x = SerialTValue, y = SerialPValue, colour = SerialTGroup, label=SerialTGroup)) +
geom_point(size = 3) + geom_text(hjust=0.4, vjust=1.3) + labs(x = "Test Statistic", y = "P-Value",
title = "A Scatterplot Showing the Test Statistics and P-Values from Serial Correlation Testing") + theme(legend.position = "none")
