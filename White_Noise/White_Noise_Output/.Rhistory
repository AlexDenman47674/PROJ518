TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
View(TfIdf)
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
load("C:/Users/Alex/Desktop/Business Analytics & Data Science/MATH513/Part 2/Package/BidenSpeeches/data/combined_speech_data.rda")
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
TfIdf(data)
TfIdf(data)
TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
install.packages("RDieHarder")
install.packages("RDieHarder")
library(RDieHarder)
library(RDieHarder)
library(RDieHarder)
dh <- dieharder; summary(dh); plot(dh)
dh <- dieharder %>% summary(dh)%>% plot(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
dh <- dieharder %>% summary(dh)%>% plot(dh)
dh <- dieharder
print(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
library(dgof)
library(randtoolbox)
#Retrieving the C# rand data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CRand1Values <- fromJSON(file = "RandVer1.json")
CRand2Values <- fromJSON(file = "RandVer2.json")
CRand3Values <- fromJSON(file = "RandVer3.json")
print(CRand1Values)
print(CRand2Values)
print(CRand3Values)
#1 sample tests
ks.test(CRand1Values/100, "pnorm")
ks.test(CRand2Values/100, "pnorm")
ks.test(CRand3Values/100, "pnorm")
#2 sample tests
ks.test(CRand1Values/100, CRand2Values/100)
ks.test(CRand1Values/100, CRand3Values/100)
ks.test(CRand2Values/100, CRand3Values/100)
#Visualisation
plot(ecdf(CRand1Values/100), main="Distribution of C# Rand Data",
xlim = range(c(CRand1Values/100, CRand2Values/100)),
col = "blue")
plot(ecdf(CRand2Values/100),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(CRand3Values/100),
add = TRUE,
lty = "dashed",
col = "green")
legend(0, 1, legend=c("C# Rand", "C# Seeded Rand","C# Cryptographic Rand"),
col=c("red", "blue", "green"), lty=1:2, cex=0.8)
#3b) Kolmogorov-Smirnov Test of Lehmer rand data
setwd("D:/Github/PROJ518/Lehmer_Generator/Lehmer_Generator_Output")
LehmerInt1Values <- fromJSON(file = "IntegerVer1Output.json")
LehmerInt2Values <- fromJSON(file = "IntegerVer2Output.json")
LehmerReal1Values <- fromJSON(file = "RealVer1Output.json")
LehmerReal2Values <- fromJSON(file = "RealVer2Output.json")
print(LehmerInt1Values)
print(LehmerInt2Values)
print(LehmerReal1Values)
print(LehmerReal2Values)
#1 sample tests
ks.test(LehmerInt1Values, "pnorm")
ks.test(LehmerInt2Values, "pnorm")
ks.test(LehmerReal1Values, "pnorm")
ks.test(LehmerReal2Values, "pnorm")
#2 sample tests
ks.test(LehmerInt1Values, LehmerInt2Values)
ks.test(LehmerReal1Values, LehmerReal2Values)
#Visualisation
plot(ecdf(LehmerReal1Values), main="Distribution of Lehmer Generator Data",
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
lty = "dashed",
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(LehmerInt1Values),
add = TRUE,
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
lty = "dashed",
col = "green")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "purple")
legend(0, 1, legend=c("Lehmer Real 1", "Lehmer Real 2","Lehmer Int 1","Lehmer Int 2"),
col=c("red", "blue", "green", "purple"), lty=1:2, cex=0.8)
#3c) Kolmogorov-Smirnov Test of Python rand data
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PRand1Values <- fromJSON(file = "PythonOutput1.json")
PRand2Values <- fromJSON(file = "PythonOutput2.json")
PRand3Values <- fromJSON(file = "PythonOutput3.json")
PRand4Values <- fromJSON(file = "PythonOutput4.json")
PRand5Values <- fromJSON(file = "PythonOutput5.json")
#1 sample tests
ks.test(PRand1Values/100, "pnorm")
ks.test(PRand2Values, "pnorm")
ks.test(PRand3Values, "pnorm")
ks.test(PRand4Values/100, "pnorm")
ks.test(PRand5Values/100, "pnorm")
#2 sample tests
ks.test(PRand2Values, PRand3Values)
ks.test(PRand1Values/100, PRand4Values/100)
ks.test(PRand1Values/100, PRand5Values/100)
ks.test(PRand4Values/100, PRand5Values/100)
#Visualisation
plot(ecdf(PRand1Values/100), main="Distribution of Python Rand Data",
xlim = range(c(PRand1Values/100, PRand2Values)),
lty = "dashed",
col = "blue")
plot(ecdf(PRand2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(PRand3Values),
add = TRUE,
lty = "dashed",
col = "green")
plot(ecdf(PRand4Values/100),
add = TRUE,
lty = "dashed",
col = "purple")
plot(ecdf(PRand5Values/100),
add = TRUE,
lty = "dashed",
col = "orange")
legend(0, 1, legend=c("Python Randint", "Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint"),
col=c("red", "blue", "green", "purple","orange"), lty=1:2, cex=0.8)
#3d) Kolmogorov-Smirnov Test of Javascript rand data
setwd("D:/Github/PROJ518/Javascript_Rand/Javascript_Rand_Output")
JSRandValues <- fromJSON(file = "JavaScriptOutput.json")
#1 sample test
ks.test(JSRandValues/100, "pnorm")
#Visualisation
plot(ecdf(JSRandValues/100), main="Distribution of JavaScript Rand Data",
lty = "dashed",
col = "blue")
#3e) Kolmogorov-Smirnov Test of Middle Square Method data
setwd("D:/Github/PROJ518/Middle_Square_Method/Middle_Square_Output")
MSRandValues <- fromJSON(file = "MiddleSquare.json")
#1 sample test
ks.test(MSRandValues/100, "pnorm")
#Visualisation
plot(ecdf(MSRandValues/100), main="Distribution of Middle Square Method Data",
lty = "dashed",
col = "blue")
#3f) Kolmogorov-Smirnov Test of Rand.Org Data
setwd("D:/Github/PROJ518/RandDotOrg/RandDotOrgOutput")
RndRandValues <- fromJSON(file = "RandDotOrgOutput1.json")
#1 sample test
ks.test(RndRandValues/100, "pnorm")
#Visualisation
plot(ecdf(RndRandValues/100), main="Distribution of Rand.Org Rand Data",
lty = "dashed",
col = "blue")
#3g) Kolmogorov-Smirnov Test of White Noise Data
setwd("D:/Github/PROJ518/White_Noise/White_Noise_Output")
ParkRandValues <-fromJSON(file = "ParkDataCut.json")
RoundaboutRandValues <-fromJSON(file = "RoundaboutDataCut.json")
SeaRandValues <-fromJSON(file = "SeaDataCut.json")
#1 sample tests
ks.test(ParkRandValues/100, "pnorm")
ks.test(RoundaboutRandValues/100, "pnorm")
ks.test(SeaRandValues/100, "pnorm")
#2 sample tests
ks.test(ParkRandValues/100, RoundaboutRandValues/100)
ks.test(ParkRandValues/100, SeaRandValues/100)
ks.test(RoundaboutRandValues/100, SeaRandValues/100)
#Visualisation
plot(ecdf(ParkRandValues/100), main="Distribution of White Noise Data",
xlim = range(c(ParkRandValues/100, RoundaboutRandValues/100)),
lty = "dashed",
col = "blue")
plot(ecdf(RoundaboutRandValues/100),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(SeaRandValues/100),
add = TRUE,
lty = "dashed",
col = "green")
legend(-13, 1, legend=c("Park White Noise", "Roundabout White Noise","Sea White Noise"),
col=c("red", "blue", "green"), lty=1:2, cex=0.8)
#3h) Visualisation of Kolmogorov-Smirnov Tests
CRand1Fn <- ecdf(CRand1Values)
CRand1Dist <- CRand1Fn(CRand1Values)
CRand2Fn <- ecdf(CRand2Values)
CRand2Dist <- CRand2Fn(CRand2Values)
CRand3Fn <- ecdf(CRand3Values)
CRand3Dist <- CRand3Fn(CRand3Values)
PRand1Fn <- ecdf(PRand1Values)
PRand1Dist <- PRand1Fn(PRand1Values)
PRand2Fn <- ecdf(PRand2Values)
PRand2Dist <- PRand2Fn(PRand2Values)
PRand3Fn <- ecdf(PRand3Values)
PRand3Dist <- PRand3Fn(PRand3Values)
PRand4Fn <- ecdf(PRand4Values)
PRand4Dist <- PRand4Fn(PRand4Values)
PRand5Fn <- ecdf(PRand5Values)
PRand5Dist <- PRand5Fn(PRand5Values)
JSRandFn <- ecdf(JSRandValues)
JSRandDist <- JSRandFn(JSRandValues)
RndRandFn <- ecdf(RndRandValues)
RndRandDist <- RndRandFn(RndRandValues)
LehmerInt1Fn <- ecdf(LehmerInt1Values)
LehmerInt1Dist <- LehmerInt1Fn(LehmerInt1Values)
LehmerInt2Fn <- ecdf(LehmerInt2Values)
LehmerInt2Dist <- LehmerInt2Fn(LehmerInt2Values)
LehmerReal1Fn <- ecdf(LehmerReal1Values)
LehmerReal1Dist <- LehmerReal1Fn(LehmerReal1Values)
LehmerReal2Fn <- ecdf(LehmerReal2Values)
LehmerReal2Dist <- LehmerReal2Fn(LehmerReal2Values)
MSRandFn <- ecdf(MSRandValues)
MSRandDist <- MSRandFn(MSRandValues)
ParkRandFn <- ecdf(ParkRandValues)
ParkRandDist <- ParkRandFn(ParkRandValues)
RoundaboutRandFn <- ecdf(RoundaboutRandValues)
RoundaboutRandDist <- RoundaboutRandFn(RoundaboutRandValues)
SeaRandFn <- ecdf(SeaRandValues)
SeaRandDist <- SeaRandFn(SeaRandValues)
RandDist <- c(CRand1Dist,CRand2Dist,CRand3Dist,PRand1Dist,PRand2Dist,PRand3Dist,PRand4Dist,PRand5Dist,JSRandDist,RndRandDist,LehmerInt1Dist,LehmerInt2Dist,
LehmerReal1Dist,LehmerReal2Dist,MSRandDist,ParkRandDist,RoundaboutRandDist,SeaRandDist)
RandOutput <- c(CRand1Values/100,CRand2Values/100,CRand3Values/100,PRand1Values/100,PRand2Values,PRand3Values,PRand4Values/100,PRand5Values/100,
JSRandDist/100,RndRandDist/100,LehmerInt1Dist,LehmerInt2Dist,
LehmerReal1Dist,LehmerReal2Dist,MSRandDist/100,ParkRandDist/100,RoundaboutRandDist/100,SeaRandDist/100)
RandGroup <- c()
for (x in 1:500) {
RandGroup <- append(RandGroup,'C# Rand')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'C# Seeded Rand')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'C# Cryptographic Rand')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Python Randint')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Python Random')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Python Seeded Random')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Numpy Randint')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Numpy Seeded Randint')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'JavaScript Rand')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Rand.Org Data')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Lehmer Int 1')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Lehmer Int 2')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Lehmer Real 1')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Lehmer Real 2')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Middle Square Data')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Park White Noise')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Roundabout White Noise')
}
for (x in 1:500) {
RandGroup <- append(RandGroup,'Sea White Noise')
}
Rand_DF <- data.frame(RandDist, RandGroup, RandOutput)
RandGroup_DF <- Rand_DF %>% group_by(RandGroup)
ggplot(RandGroup_DF, aes(x = RandOutput, y = RandDist, colour = RandGroup)) +
geom_point() + scale_x_continuous(limits=c(0, 1))+ labs(x = "Random Numbers Generated", y = "Distribution", color = "Data Sources", title = "A Scatterplot Showing Distribution of Collected Rand Data")
#4a) Serial Test of C# Rand Data
#The Serial Test is used to test the equidistribution of pairs of values
#While the KS Test focused on the distribution of the dataset as a whole, the Serial Test uses value d to compare sets of values
#As with the KS Test, the Serial Test requires data between 0 and 1, so division is used on some datasets to ensure they conform to the test requirements
print(serial.test(CRand1Values/100, d=2))
print(serial.test(CRand2Values/100, d=2))
print(serial.test(CRand3Values/100, d=2))
#4b) Serial Test of Python Rand Data
print(serial.test(PRand1Values/100, d=2))
print(serial.test(PRand2Values, d=2))
print(serial.test(PRand3Values, d=2))
print(serial.test(PRand4Values/100, d=2))
print(serial.test(PRand5Values/100, d=2))
#4c) Serial Test of JavaScript Rand Data
print(serial.test(JSRandValues/100, d=2))
#4d) Serial Test of Rand.Org Data
print(serial.test(RndRandValues/100, d=2))
#4e) Serial Test of Lehmer Generator Rand Data
print(serial.test(LehmerInt1Values, d=2))
print(serial.test(LehmerInt2Values, d=2))
print(serial.test(LehmerReal1Values, d=2))
print(serial.test(LehmerReal2Values, d=2))
#4f) Serial Test of Middle Square Generator Data
print(serial.test(MSRandValues/100, d=2))
#4g) Serial Test of White Noise Data
print(serial.test(ParkRandValues/100, d=2))
print(serial.test(RoundaboutRandValues/100, d=2))
print(serial.test(SeaRandValues/100, d=2))
#4h) Visualisation
#Some p-values presented were considered to be anomalous either due to the nature or faults of the generators in question
#Therefore when visualising the data these generators were removed to allow for a more balanced overview
SerialPValue <- c(0.76,0.69,0.14,0.27,0.03,0.43,0.7,0.17,0.33,0.28,0.95)
SerialPGroup <- c("C# Rand","C# Seeded Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Real 1","Lehmer Real 2")
SerialP_DF <- data.frame(SerialPValue, SerialPGroup)
View(SerialP_DF)
View(SerialP_DF)
SerialPGroup_DF <- SerialP_DF %>% group_by(SerialPGroup)
ggplot(SerialPGroup_DF, aes(x = SerialPGroup, y = SerialPValue)) +
geom_bar(stat = "identity", width=0.5, position="dodge")
ggplot(SerialPGroup_DF, aes(x = SerialPGroup, y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=1, position="dodge")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5)
, position="dodge"
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x=element_blank())
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1))
+ labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) + labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup, label = SerialPValue)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup), label = SerialPValue) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup, label = SerialPValue)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data")
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data") + geom_text(aes(label = SerialPValue))
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup) +
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data")
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data") + geom_text(aes(label = SerialPValue))
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data") + geom_text(aes(label = SerialPValue, vjust = 1.5))
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data") + geom_text(aes(label = SerialPValue, vjust = 1))
ggplot(SerialPGroup_DF, aes(x = reorder(SerialPGroup, -SerialPValue), y = SerialPValue, fill = SerialPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Rand Data") + geom_text(aes(label = SerialPValue, vjust = 1.2))
