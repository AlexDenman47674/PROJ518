TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
View(TfIdf)
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
load("C:/Users/Alex/Desktop/Business Analytics & Data Science/MATH513/Part 2/Package/BidenSpeeches/data/combined_speech_data.rda")
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
TfIdf(data)
TfIdf(data)
TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
install.packages("RDieHarder")
install.packages("RDieHarder")
library(RDieHarder)
library(RDieHarder)
library(RDieHarder)
dh <- dieharder; summary(dh); plot(dh)
dh <- dieharder %>% summary(dh)%>% plot(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
dh <- dieharder %>% summary(dh)%>% plot(dh)
dh <- dieharder
print(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
library(dgof)
library(randtoolbox)
library(randtests)
library(EnvStats)
#Retrieving the C# rand data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CRand1Values <- fromJSON(file = "RandVer1.json")
CRand2Values <- fromJSON(file = "RandVer2.json")
CRand3Values <- fromJSON(file = "RandVer3.json")
#3b) Kolmogorov-Smirnov Test of Lehmer rand data
setwd("D:/Github/PROJ518/Lehmer_Generator/Lehmer_Generator_Output")
LehmerInt1Values <- fromJSON(file = "IntegerVer1Output.json")
LehmerInt2Values <- fromJSON(file = "IntegerVer2Output.json")
LehmerReal1Values <- fromJSON(file = "RealVer1Output.json")
LehmerReal2Values <- fromJSON(file = "RealVer2Output.json")
#3c) Kolmogorov-Smirnov Test of Python rand data
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PRand1Values <- fromJSON(file = "PythonOutput1.json")
PRand2Values <- fromJSON(file = "PythonOutput2.json")
PRand3Values <- fromJSON(file = "PythonOutput3.json")
PRand4Values <- fromJSON(file = "PythonOutput4.json")
PRand5Values <- fromJSON(file = "PythonOutput5.json")
#3d) Kolmogorov-Smirnov Test of Javascript rand data
setwd("D:/Github/PROJ518/Javascript_Rand/Javascript_Rand_Output")
JSRandValues <- fromJSON(file = "JavaScriptOutput.json")
#3e) Kolmogorov-Smirnov Test of Middle Square Method data
setwd("D:/Github/PROJ518/Middle_Square_Method/Middle_Square_Output")
MSRandValues <- fromJSON(file = "MiddleSquare.json")
#3f) Kolmogorov-Smirnov Test of Rand.Org Data
setwd("D:/Github/PROJ518/RandDotOrg/RandDotOrgOutput")
RndRandValues <- fromJSON(file = "RandDotOrgOutput1.json")
#3g) Kolmogorov-Smirnov Test of White Noise Data
setwd("D:/Github/PROJ518/White_Noise/White_Noise_Output")
ParkRandValues <-fromJSON(file = "ParkDataCut.json")
RoundaboutRandValues <-fromJSON(file = "RoundaboutDataCut.json")
SeaRandValues <-fromJSON(file = "SeaDataCut.json")
install.packages("CryptRndTest")
library(CryptRndTest)
#9a) Birthday Spacings Test of Rand Data
#The Birthday Spacings Test works by choosing m birthdays from a year composed of n days then looking at the number of repetitions of spacing values
#The test evaluates the distribution of a data set
B <- 16
m <- 32
n <- 2^B
lambda <- (m^3)/(4*n)
alpha <- 0.05
print(birthday.spacings(CRand1Values,m,n,alpha,lambda,num.class = 10))
#9a) Birthday Spacings Test of Rand Data
#The Birthday Spacings Test works by choosing m birthdays from a year composed of n days then looking at the number of repetitions of spacing values
#The test evaluates the distribution of a data set
B <- 32
print(birthday.spacings(CRand1Values,m,n,alpha,lambda,num.class = 10))
#9a) Birthday Spacings Test of Rand Data
#The Birthday Spacings Test works by choosing m birthdays from a year composed of n days then looking at the number of repetitions of spacing values
#The test evaluates the distribution of a data set
B <- 16
print(birthday.spacings(CRand1Values/100,m,n,alpha,lambda,num.class = 10))
print(birthday.spacings(CRand1Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(CRand2Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(CRand3Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(CRand1Values,m,n,alpha,lambda,num.class = 500))
#CRand1 had a Test Statistic of 15.172
print(birthday.spacings(CRand2Values,m,n,alpha,lambda,num.class = 100))
#CRand2 had a Test Statistic of 15.013
print(birthday.spacings(CRand3Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(PRand1Values,m,n,alpha,lambda,num.class = 100))
#PRand1 had a Test Statistic of 14.739
print(birthday.spacings(PRand2Values,m,n,alpha,lambda,num.class = 100))
#PRand2 had a Test Statistic of 2
print(birthday.spacings(PRand3Values,m,n,alpha,lambda,num.class = 100))
#PRand3 had a Test Statistic of 2
print(birthday.spacings(PRand3Values,m,n,alpha,lambda,num.class = 100))
#PRand3 had a Test Statistic of 2
print(birthday.spacings(PRand4Values,m,n,alpha,lambda,num.class = 100))
#PRand4 had a Test Statistic of 15.504
print(birthday.spacings(PRand5Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(JSRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(RndRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(LehmerInt1Values,m,n,alpha,lambda,num.class = 100))
#LehmerInt1 had a Test Statistic of 2
print(birthday.spacings(LehmerInt2Values,m,n,alpha,lambda,num.class = 100))
#LehmerInt2 had a Test Statistic of 2
print(birthday.spacings(LehmerReal1Values,m,n,alpha,lambda,num.class = 100))
#LehmerInt2 had a Test Statistic of 2
print(birthday.spacings(LehmerReal1Values*100,m,n,alpha,lambda,num.class = 100))
#LehmerReal1 had a Test Statistic of 2
print(birthday.spacings(LehmerReal2Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(MSRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(ParkRandValues,m,n,alpha,lambda,num.class = 100))
#ParkRand had a Test Statistic of 16.813
print(birthday.spacings(RoundaboutRandValues,m,n,alpha,lambda,num.class = 100))
#RoundaboutRand had a Test Statistic of 16.73
print(birthday.spacings(SeaRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(CRand1Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(CRand1Values,m,n,alpha,lambda,num.class = 100))
#CRand1 had a Test Statistic of 15.172 and an AD result of 0
print(birthday.spacings(CRand2Values,m,n,alpha,lambda,num.class = 100))
#CRand2 had a Test Statistic of 15.013 and an AD result of 0
print(birthday.spacings(CRand3Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(PRand1Values,m,n,alpha,lambda,num.class = 100))
#PRand1 had a Test Statistic of 14.739 and an AD result of 0
print(birthday.spacings(PRand2Values,m,n,alpha,lambda,num.class = 100))
#PRand2 had a Test Statistic of 2 and an AD result of 1
print(birthday.spacings(PRand3Values,m,n,alpha,lambda,num.class = 100))
#PRand3 had a Test Statistic of 2 and an AD result of 1
print(birthday.spacings(PRand4Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(JSRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(RndRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(LehmerInt1Values,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(MSRandValues,m,n,alpha,lambda,num.class = 100))
print(birthday.spacings(ParkRandValues,m,n,alpha,lambda,num.class = 100))
#9b) Visualisation
BirthdayStatValue <- c(15.172,15.013,16.221,14.739,2,2,15.504,15.221,14.583,14.837,2,2,2,2,12.816,16.73,16.858)
BirthdayResultValue <- c(0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0)
BirthdayResultValue <- c(0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0)
#9b) Visualisation
BirthdayStatValue <- c(15.172,15.013,16.221,14.739,2,2,15.504,15.221,14.583,14.837,2,2,2,2,12.816,16.813,16.73,16.858)
BirthdayGroup <- c("C# Rand",
"C# Seeded Rand",
"C# Cryptographic Rand",
"Python Randint",
"Python Random",
"Python Seeded Random",
"Numpy Randint",
"Numpy Seeded Randint",
"JavaScript Rand",
"Rand.Org Data",
"Lehmer Int 1",
"Lehmer Int 2",
"Lehmer Real 1",
"Lehmer Real 2",
"Middle Square Method",
"Park White Noise",
"Roundabout White Noise",
"Sea White Noise")
Birthday_DF <- data.frame(BirthdayStatValue, BirthdayResultValue, BirthdayGroup)
View(Birthday_DF)
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup))) +
geom_bar(stat = "identity", width=1, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup))) +
geom_bar(stat = "identity", width=0.8, position="dodge") + geom_text(hjust=0.4, vjust=1.3) +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup), label= BirthdayGroup)) +
geom_bar(stat = "identity", width=0.8, position="dodge") + geom_text(hjust=0.4, vjust=1.3) +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
#Visualisation
TexasDealValues <- c(0,4,1,1,0,3,2,1,0,0,0,4,2,1,0,2,2,1,0,1,2,4,0,0,0,4,1,1,0,0,2,3,1,0,0,0,1,0,0,5)
TexasDealOutcomes <- c("High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush",
"High Card","Pair","Two Pair","Three of a Kind","Flush")
TexasDealSources <- c("C# Random","C# Random","C# Random","C# Random","C# Random",
"C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random","C# Seeded Random",
"Python Randint","Python Randint","Python Randint","Python Randint", "Python Randint",
"Numpy Random","Numpy Random","Numpy Random","Numpy Random","Numpy Random",
"Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random","Numpy Seeded Random",
"Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1","Real Card Shuffle 1",
"Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2","Real Card Shuffle 2",
"Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3","Real Card Shuffle 3")
TexasDeal_DF <- data.frame(TexasDealValues, TexasDealOutcomes, TexasDealSources)
ggplot(TexasDeal_DF, aes(x = TexasDealSources, y = TexasDealValues, fill = factor(TexasDealOutcomes))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Possible Card Outcomes",breaks=c("High Card","Pair", "Two Pair", "Three of a Kind","Flush"),
labels=c("High Card","Pair", "Two Pair","Three of a Kind","Flush")) +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
labs(x = "Data Sources", y = "Frequency", title = "A Barchart Showing the Frequency of Poker Hand Outcomes after alternative non-sequential distribution")
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup))) +
geom_bar(stat = "identity", width=0.8, position="dodge") + geom_text(aes(label = BirthdayGroup, vjust = -0.5)) +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
ggplot(Birthday_DF, aes(x = BirthdayResultValue, y = BirthdayStatValue, fill = factor(BirthdayGroup))) +
geom_bar(stat = "identity", width=0.8, position="dodge") +
scale_fill_discrete(name="Data Sources",breaks=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise"),
labels=c("C# Rand", "C# Seeded Rand", "C# Cryptographic Rand", "Python Randint", "Python Random", "Python Seeded Random",
"Numpy Randint","Numpy Seeded Randint","JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2",
"Lehmer Real 1","Lehmer Real 2","Middle Square Method","Park White Noise","Roundabout White Noise","Sea White Noise")) +
labs(x = "Anderson-Darling Test Result", y = "Anderson-Darling Test Statistic", title = "A Barchart Showing the Results of the Birthday Spacings Test")
