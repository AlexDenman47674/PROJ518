TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
View(TfIdf)
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
load("C:/Users/Alex/Desktop/Business Analytics & Data Science/MATH513/Part 2/Package/BidenSpeeches/data/combined_speech_data.rda")
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
TfIdf(data)
TfIdf(data)
TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
install.packages("RDieHarder")
install.packages("RDieHarder")
library(RDieHarder)
library(RDieHarder)
library(RDieHarder)
dh <- dieharder; summary(dh); plot(dh)
dh <- dieharder %>% summary(dh)%>% plot(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
dh <- dieharder %>% summary(dh)%>% plot(dh)
dh <- dieharder
print(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
library(dgof)
library(randtoolbox)
install.packages("snpar")
library(snpar)
library(snpar)
install.packages("randtests")
library(randtests)
#3b) Kolmogorov-Smirnov Test of Lehmer rand data
setwd("D:/Github/PROJ518/Lehmer_Generator/Lehmer_Generator_Output")
#Retrieving the C# rand data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CRand1Values <- fromJSON(file = "RandVer1.json")
CRand2Values <- fromJSON(file = "RandVer2.json")
CRand3Values <- fromJSON(file = "RandVer3.json")
#3b) Kolmogorov-Smirnov Test of Lehmer rand data
setwd("D:/Github/PROJ518/Lehmer_Generator/Lehmer_Generator_Output")
LehmerInt1Values <- fromJSON(file = "IntegerVer1Output.json")
LehmerInt2Values <- fromJSON(file = "IntegerVer2Output.json")
LehmerReal1Values <- fromJSON(file = "RealVer1Output.json")
LehmerReal2Values <- fromJSON(file = "RealVer2Output.json")
#3c) Kolmogorov-Smirnov Test of Python rand data
setwd("D:/Github/PROJ518/Python_Rand_Function/Python_Output")
PRand1Values <- fromJSON(file = "PythonOutput1.json")
PRand2Values <- fromJSON(file = "PythonOutput2.json")
PRand3Values <- fromJSON(file = "PythonOutput3.json")
PRand4Values <- fromJSON(file = "PythonOutput4.json")
PRand5Values <- fromJSON(file = "PythonOutput5.json")
#3d) Kolmogorov-Smirnov Test of Javascript rand data
setwd("D:/Github/PROJ518/Javascript_Rand/Javascript_Rand_Output")
JSRandValues <- fromJSON(file = "JavaScriptOutput.json")
#3e) Kolmogorov-Smirnov Test of Middle Square Method data
setwd("D:/Github/PROJ518/Middle_Square_Method/Middle_Square_Output")
MSRandValues <- fromJSON(file = "MiddleSquare.json")
#3f) Kolmogorov-Smirnov Test of Rand.Org Data
setwd("D:/Github/PROJ518/RandDotOrg/RandDotOrgOutput")
RndRandValues <- fromJSON(file = "RandDotOrgOutput1.json")
#3g) Kolmogorov-Smirnov Test of White Noise Data
setwd("D:/Github/PROJ518/White_Noise/White_Noise_Output")
ParkRandValues <-fromJSON(file = "ParkDataCut.json")
RoundaboutRandValues <-fromJSON(file = "RoundaboutDataCut.json")
SeaRandValues <-fromJSON(file = "SeaDataCut.json")
#7a) Run Test of C# Rand Data
print(runs.test(CRand1Values))
#CRand1 had a chi-squared statistic of 1.7118 and a p-value of 0.08693
print(runs.test(CRand2Values))
#CRand2 had a chi-squared statistic of -1.2151 and a p-value of 0.2243
print(runs.test(CRand3Values))
print(runs.test(PRand1Values))
#PRand1 had a chi-squared statistic of 0.36778 and a p-value of 0.713
print(runs.test(PRand2Values))
#PRand2 had a chi-squared statistic of 0.44766 and a p-value of 0.6544
print(runs.test(PRand3Values))
#PRand3 had a chi-squared statistic of -0.62673 and a p-value of 0.5308
print(runs.test(PRand4Values))
#PRand4 had a chi-squared statistic of 0.00036468 and a p-value of 0.9997
print(runs.test(PRand5Values))
print(runs.test(JSRandValues))
print(runs.test(RndRandValues))
print(runs.test(LehmerInt1Values))
#LehmerInt1 had a chi-squared statistic of 0.2686 and a p-value of 0.7882
print(runs.test(LehmerInt2Values))
#LehmerInt2 had a chi-squared statistic of 1.9697 and a p-value of 0.04887
print(runs.test(LehmerReal1Values))
#LehmerReal1 had a test statistic of -0.35813 and a p-value of 0.7202
print(runs.test(LehmerReal2Values))
print(runs.test(MSRandValues))
print(runs.test(ParkRandValues))
#ParkRand had a test statistic of -20.951 and a p-value of 2.2e-16
print(runs.test(RoundaboutRandValues))
#RoundaboutRand had a test statistic of -20.454 and a p-value of 2.2e-16
print(runs.test(SeaRandValues))
#Visualisation
RunsPValue <- c(0.08693, 0.2243, 0.3229, 0.713, 0.6544, 0.5308, 0.9997, 0.3706, 0.3018, 0.05256, 0.7882, 0.04887, 0.7202, 0.6544)
RunsPGroup <- c("C# Rand","C# Seeded Rand","C# Cryptographic Rand","Python Randint","Python Random","Python Seeded Random","Numpy Randint","Numpy Seeded Randint",
"JavaScript Rand","Rand.Org Data","Lehmer Int 1","Lehmer Int 2","Lehmer Real 1","Lehmer Real 2")
RunsP_DF <- data.frame(RunsPValue, RunsPGroup)
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = GapPValue, vjust = 1.2))
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue, vjust = 1.2))
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue, vjust = 1.5))
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue))
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue, vjust = 2))
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue, vjust = -2))
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue, vjust = -1))
ggplot(RunsP_DF, aes(x = reorder(RunsPGroup, -RunsPValue), y = RunsPValue, fill = RunsPGroup)) +
geom_bar(stat = "identity", width=0.5, position="dodge") + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1),legend.position = "none") +
labs(x = "Data Sources", y = "P-Values", title = "A Bar Chart Showing P-Values of Collected Runs Test Data") + geom_text(aes(label = RunsPValue, vjust = -0.5))
