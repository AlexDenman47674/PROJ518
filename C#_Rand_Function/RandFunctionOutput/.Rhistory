TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
View(TfIdf)
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
load("C:/Users/Alex/Desktop/Business Analytics & Data Science/MATH513/Part 2/Package/BidenSpeeches/data/combined_speech_data.rda")
#' It plots bar graphs using the \code{ggplot2} package
#'
#' @param data A data frame containing what was said, the event it was said at
#'
#' @author James Woodland
#' @import ggplot2
#' @import dplyr
#' @import tidytext
#' @export
#' @examples
data <- combined_speech_data
TfIdf(data)
TfIdf(data)
TfIdf <- function(data){
b_d <- data %>%
unnest_tokens(word, speech) %>%
group_by_all() %>%
anti_join(tidytext::stop_words)
b_t <- data.frame(event = b_d$event, word = b_d$word) %>%
count(event, word) %>%
bind_tf_idf(word, event, n) %>%
arrange(desc(tf_idf))
b_t %>%
group_by(event) %>%
top_n(10, tf_idf) %>%
ggplot(aes(y = reorder(word, tf_idf), x = tf_idf)) +
geom_col(aes(fill = event)) +
facet_wrap( ~event, scales = "free") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 8)) +
ggtitle("Highest tf竏段df Words in Joe Biden's speeches in 2020") +
xlab(label = "tf竏段df index") +
ylab(label = "")
}
install.packages("RDieHarder")
install.packages("RDieHarder")
library(RDieHarder)
library(RDieHarder)
library(RDieHarder)
dh <- dieharder; summary(dh); plot(dh)
dh <- dieharder %>% summary(dh)%>% plot(dh)
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
dh <- dieharder %>% summary(dh)%>% plot(dh)
dh <- dieharder
print(dh)
install.packages("dgof")
library(rjson)
library(plyr)
library(dplyr)
library(ggplot2)
library(dgof)
#3a) Kolmogorov-Smirnov Test of C# rand data
#Retrieving the C# rand data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionO'utput")
#3a) Kolmogorov-Smirnov Test of C# rand data
#Retrieving the C# rand data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CRand1Values <- fromJSON(file = "RandVer1.json")
print(RealCoinValues)
print(CRand1Values)
#The Kolmogorov-Smirnov test requires that data be between 0 and 1
#Therefore the data must be processed first to fit the criteria
#As the minimum and maximum possible values of the generators were 0 and 100, this will not impact the validity or probability of the generated values
ks.test(CRand1Values/10, "pnorm")
#The Kolmogorov-Smirnov test requires that data be between 0 and 1
#Therefore the data must be processed first to fit the criteria
#As the minimum and maximum possible values of the generators were 0 and 100, this will not impact the validity or probability of the generated values
ks.test((CRand1Values/100), "pnorm")
#The Kolmogorov-Smirnov test requires that data be between 0 and 1
#Therefore the data must be processed first to fit the criteria
#As the minimum and maximum possible values of the generators were 0 and 100, this will not impact the validity or probability of the generated values
ks.test(CRand1Values, "pnorm")
x1 <- rnorm(100)
ks.test(x1, "pnorm")
print(x1)
print(CRand1Values/100)
#3b) Kolmogorov-Smirnov Test of Lehmer rand data
setwd("D:/Github/PROJ518/Lehmer_Generator/Lehmer_Generator_Output")
LehmerInt1Values <- fromJSON(file = "IntegerVer1Output.json")
print(LehmerInt1Values)
ks.test(LehmerInt1Values, "pnorm")
LehmerInt2Values <- fromJSON(file = "IntegerVer2Output.json")
print(LehmerInt2Values)
LehmerReal1Values <- fromJSON(file = "RealVer1Output.json")
print(LehmerReal1Values)
LehmerReal2Values <- fromJSON(file = "RealVer2Output.json")
print(LehmerReal2Values)
#1 sample tests
ks.test(LehmerInt1Values, "pnorm")
ks.test(LehmerInt2Values, "pnorm")
ks.test(LehmerReal1Values, "pnorm")
ks.test(LehmerReal2Values, "pnorm")
#2 sample tests
ks.test(LehmerInt1Values, LehmerInt2Values)
ks.test(LehmerReal1Values, LehmerReal2Values)
#The Kolmogorov-Smirnov test requires that data be between 0 and 1
#Therefore the data must be processed first to fit the criteria
#As the minimum and maximum possible values of the generators were 0 and 100, this will not impact the validity or probability of the generated values
ks.test(CRand1Values, "pnorm")
#The Kolmogorov-Smirnov test requires that data be between 0 and 1
#Therefore the data must be processed first to fit the criteria
#As the minimum and maximum possible values of the generators were 0 and 100, this will not impact the validity or probability of the generated values
ks.test(CRand1Values/100, "pnorm")
#3a) Kolmogorov-Smirnov Test of C# rand data
#Retrieving the C# rand data from the C# output
setwd("D:/Github/PROJ518/C#_Rand_Function/RandFunctionOutput")
CRand1Values <- fromJSON(file = "RandVer1.json")
CRand2Values <- fromJSON(file = "RandVer2.json")
print(CRand1Values)
print(CRand2Values)
ks.test(CRand2Values/100, "Pnorm")
ks.test(CRand2Values/100, "pnorm")
#The Kolmogorov-Smirnov test requires that data be between 0 and 1
#Therefore the data must be processed first to fit the criteria
#As the minimum and maximum possible values of the generators were 0 and 100, this will not impact the validity or probability of the generated values
#1 sample tests
ks.test(CRand1Values/100, "pnorm")
ks.test(CRand2Values/100, "pnorm")
#The Kolmogorov-Smirnov test requires that data be between 0 and 1
#Therefore the data must be processed first to fit the criteria
#As the minimum and maximum possible values of the generators were 0 and 100, this will not impact the validity or probability of the generated values
#1 sample tests
ks.test(CRand1Values, "pnorm")
ks.test(CRand2Values, "pnorm")
CRand3Values <- fromJSON(file = "RandVer3.json")
print(CRand3Values)
ks.test(CRand3Values, "pnorm")
#1 sample tests
ks.test(CRand1Values, "pnorm")
ks.test(CRand2Values, "pnorm")
ks.test(CRand3Values, "pnorm")
ks.test(CRand3Values/100, "pnorm")
#1 sample tests
ks.test(CRand1Values/10, "pnorm")
#1 sample tests
ks.test(CRand1Values/10, "pnorm")
ks.test(CRand2Values/10, "pnorm")
ks.test(CRand3Values/10, "pnorm")
#2 sample tests
ks.test(CRand1Values, CRand2Values)
#2 sample tests
ks.test(LehmerInt1Values, LehmerInt2Values)
ks.test(CRand1Values, CRand3Values)
ks.test(CRand2Values, CRand3Values)
#2 sample tests
ks.test(CRand1Values/10, CRand2Values/10)
ks.test(CRand3Values, "pnorm")
#1 sample tests
ks.test(CRand1Values, "pnorm")
ks.test(CRand2Values, "pnorm")
ks.test(CRand3Values, "pnorm")
#2 sample tests
ks.test(CRand1Values, CRand2Values)
ks.test(CRand1Values, CRand3Values)
ks.test(CRand2Values, CRand3Values)
#2 sample tests
ks.test(CRand1Values, CRand2Values, alternative = "l")
print(CRand1Values/100)
#1 sample tests
ks.test(CRand1Values/100, "pnorm")
ks.test(CRand2Values/100, "pnorm")
ks.test(CRand3Values/100, "pnorm")
ks.test(CRand2Values/100, CRand3Values/100)
#2 sample tests
ks.test(CRand1Values/100, CRand2Values/100)
ks.test(CRand1Values/100, CRand3Values/100)
ks.test(CRand2Values/100, CRand3Values/100)
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "red")
# visualization
plot(ecdf(LehmerInt1Values),
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
col = "blue")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "red")
# visualization
plot(ecdf(CRand1Values/100),
xlim = range(c(CRand1Values/100, CRand2Values/100)),
col = "blue")
plot(ecdf(CRand2Values/100),
add = TRUE,
lty = "dashed",
col = "red")
#1 sample tests
ks.test(CRand1Values/100, "pnorm")
plot(ecdf(LehmerReal1Values),
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(CRand1Values),
xlim = range(c(CRand1Values, CRand2Values)),
col = "blue")
plot(ecdf(CRand2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(CRand3Values),
add = TRUE,
lty = "dashed",
col = "green")
plot(ecdf(CRand1Values/100),
xlim = range(c(CRand1Values/100, CRand2Values/100)),
col = "blue")
plot(ecdf(CRand2Values/100),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(CRand3Values/100),
add = TRUE,
lty = "dashed",
col = "green")
plot(ecdf(LehmerReal1Values),
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(LehmerInt1Values),
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
col = "green")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "purple")
plot(ecdf(LehmerReal1Values),
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(LehmerInt1Values),
add = TRUE,
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
col = "red")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "blue")
plot(ecdf(LehmerReal1Values),
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(LehmerInt1Values),
add = TRUE,
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
col = "green")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "purple")
plot(ecdf(LehmerReal1Values),
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
title = "Hi",
col = "blue")
plot(ecdf(LehmerReal1Values),      title = "Hi",
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
col = "blue")
plot(ecdf(LehmerReal1Values),
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(LehmerInt1Values),
add = TRUE,
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
col = "green")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "purple")
plot(Title),
plot(ecdf(LehmerReal1Values), main="Main title",
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(LehmerInt1Values),
add = TRUE,
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
col = "green")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "purple")
plot(ecdf(LehmerReal1Values), main="Distribution of Lehmer Generator Data",
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(LehmerInt1Values),
add = TRUE,
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
col = "green")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "purple")
plot(ecdf(CRand1Values/100), main="Distribution of C# Rand Data",
xlim = range(c(CRand1Values/100, CRand2Values/100)),
col = "blue")
plot(ecdf(CRand2Values/100),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(CRand3Values/100),
add = TRUE,
lty = "dashed",
col = "green")
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue", "green"), lty=1:2, cex=0.8)
legend(1, 95, 1, legend=c("Line 1", "Line 2"),
col=c("red", "blue", "green"), lty=1:2, cex=0.8)
legend(1, 95, 1, legend=c("Line 1", "Line 2","Line 3"),
col=c("red", "blue", "green"), lty=1:2, cex=0.8)
legend(1, 95, 1, legend=c("Line 1", "Line 2","Line 3"),
col=c("red", "blue", "green"))
legend(CRand1Values, CRand2Values, CRand3Values, legend=c("Line 1", "Line 2","Line 3"),
col=c("red", "blue", "green"))
legend(0, 1, legend=c("Line 1", "Line 2","Line 3"),
col=c("red", "blue", "green"))
legend(0, 1, legend=c("Line 1", "Line 2","Line 3"),
col=c("red", "blue", "green"), lty=1:2, cex=0.8)
plot(ecdf(CRand1Values/100), main="Distribution of C# Rand Data",
xlim = range(c(CRand1Values/100, CRand2Values/100)),
col = "blue")
plot(ecdf(CRand2Values/100),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(CRand3Values/100),
add = TRUE,
lty = "dashed",
col = "green")
legend(0, 1, legend=c("Rand 1", "Rand 2","Rand 3"),
col=c("red", "blue", "green"), lty=1:2, cex=0.8)
plot(ecdf(LehmerReal1Values), main="Distribution of Lehmer Generator Data",
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(LehmerInt1Values),
add = TRUE,
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
col = "green")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "purple")
legend(0, 1, legend=c("Lehmer Real 1", "Lehmer Real 2","Lehmer Int 1","Lehmer Int 2"),
col=c("red", "blue", "green", "purple"), lty=1:2, cex=0.8)
plot(ecdf(LehmerReal1Values), main="Distribution of Lehmer Generator Data",
xlim = range(c(LehmerReal1Values, LehmerReal2Values)),
lty = "dashed",
col = "blue")
plot(ecdf(LehmerReal2Values),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(LehmerInt1Values),
add = TRUE,
xlim = range(c(LehmerInt1Values, LehmerInt2Values)),
lty = "dashed",
col = "green")
plot(ecdf(LehmerInt2Values),
add = TRUE,
lty = "dashed",
col = "purple")
legend(0, 1, legend=c("Lehmer Real 1", "Lehmer Real 2","Lehmer Int 1","Lehmer Int 2"),
col=c("red", "blue", "green", "purple"), lty=1:2, cex=0.8)
#Visualisation
plot(ecdf(CRand1Values/100), main="Distribution of C# Rand Data",
xlim = range(c(CRand1Values/100, CRand2Values/100)),
col = "blue")
plot(ecdf(CRand2Values/100),
add = TRUE,
lty = "dashed",
col = "red")
plot(ecdf(CRand3Values/100),
add = TRUE,
lty = "dashed",
col = "green")
legend(0, 1, legend=c("Rand 1", "Rand 2","Rand 3"),
col=c("red", "blue", "green"), lty=1:2, cex=0.8)
